[{"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/index.js":"1","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/App.js":"2","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/reducers/index.js":"3","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Navbar/Navbar.js":"4","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Home/Home.js":"5","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Auth/Auth.js":"6","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/PostDetails/PostDetails.jsx":"7","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/reducers/auth.js":"8","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/reducers/posts.js":"9","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Navbar/styles.js":"10","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/styles.js":"11","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Auth/icon.js":"12","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Auth/Input.js":"13","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Auth/styles.js":"14","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/actions/posts.js":"15","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/actions/auth.js":"16","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Form/Form.js":"17","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Posts/Posts.js":"18","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/PostDetails/styles.js":"19","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Pagination.jsx":"20","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/PostDetails/CommentSection.jsx":"21","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/constants/actionTypes.js":"22","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Form/styles.js":"23","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Posts/styles.js":"24","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/styles.js":"25","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Posts/Post/Post.js":"26","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/api/index.js":"27","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Posts/Post/styles.js":"28"},{"size":528,"mtime":1656669599987,"results":"29","hashOfConfig":"30"},{"size":1225,"mtime":1656669599979,"results":"31","hashOfConfig":"30"},{"size":149,"mtime":1656669599988,"results":"32","hashOfConfig":"30"},{"size":3003,"mtime":1656669599983,"results":"33","hashOfConfig":"30"},{"size":4856,"mtime":1656669599982,"results":"34","hashOfConfig":"30"},{"size":5884,"mtime":1656669599980,"results":"35","hashOfConfig":"30"},{"size":4375,"mtime":1656669599985,"results":"36","hashOfConfig":"30"},{"size":779,"mtime":1656669599988,"results":"37","hashOfConfig":"30"},{"size":1741,"mtime":1656669599988,"results":"38","hashOfConfig":"30"},{"size":910,"mtime":1656669599984,"results":"39","hashOfConfig":"30"},{"size":464,"mtime":1656669599988,"results":"40","hashOfConfig":"30"},{"size":501,"mtime":1656669599981,"results":"41","hashOfConfig":"30"},{"size":1865,"mtime":1656669599980,"results":"42","hashOfConfig":"30"},{"size":637,"mtime":1656669599981,"results":"43","hashOfConfig":"30"},{"size":3359,"mtime":1656669599979,"results":"44","hashOfConfig":"30"},{"size":762,"mtime":1656669599979,"results":"45","hashOfConfig":"30"},{"size":4398,"mtime":1656669599981,"results":"46","hashOfConfig":"30"},{"size":1162,"mtime":1656669599986,"results":"47","hashOfConfig":"30"},{"size":1019,"mtime":1656669599985,"results":"48","hashOfConfig":"30"},{"size":1258,"mtime":1656669599984,"results":"49","hashOfConfig":"30"},{"size":2624,"mtime":1656669599984,"results":"50","hashOfConfig":"30"},{"size":560,"mtime":1656669599987,"results":"51","hashOfConfig":"30"},{"size":424,"mtime":1656669599981,"results":"52","hashOfConfig":"30"},{"size":265,"mtime":1656669599986,"results":"53","hashOfConfig":"30"},{"size":150,"mtime":1656669599986,"results":"54","hashOfConfig":"30"},{"size":5025,"mtime":1656669599985,"results":"55","hashOfConfig":"30"},{"size":1839,"mtime":1656672634203,"results":"56","hashOfConfig":"30"},{"size":1031,"mtime":1656669599986,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5a70p0",{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/index.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/App.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/reducers/index.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Navbar/Navbar.js",["118"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\"\nimport { AppBar, Avatar, Button, Toolbar, Typography } from \"@material-ui/core\";\nimport { useDispatch } from 'react-redux'\nimport { useLocation, useNavigate } from \"react-router\";\n\nimport decode from 'jwt-decode'; //***************** */\n\n\n\nimport useStyles from \"./styles\";\nimport memories from \"../../images/memories.png\";\n\nconst Navbar = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [ user, setUser ] = useState(JSON.parse(localStorage.getItem('profile'))); //Here, we are retrieving the user data ('profile') set in the local storage\n\n  console.log(user);\n\n  const logout = () => {\n    dispatch({ type: 'LOGOUT' });\n\n    navigate('/');\n\n    setUser(null);\n  }\n\n  useEffect(() => {\n    const token = user?.token // we're checking if token exist and if it does, we are sending it to the token variable \n\n    //checking to see if the token has expired so we can log the user out\n    if(token) {\n      const decodedToken = decode(token);\n\n      if(decodedToken.exp * 1000 < new Date().getTime()) logout();\n    }\n\n    setUser(JSON.parse(localStorage.getItem('profile')));\n\n  }, [location]);  //The useLocation is like a usestate that returns a new location. Whenever the URL changes, a new location object will be returned. so in this block of code, we want the the user to be set when location changes.\n\n\n  return (\n    <AppBar className={classes.appBar} position=\"static\" color=\"inherit\">\n      <div className={classes.brandContainer}>\n        <Typography \n        component={Link} to=\"/\" //This is a link pointing to the homepage\n        className={classes.heading} \n        variant=\"h2\" \n        align=\"center\">\n          Memories\n        </Typography>\n        <img\n          className={classes.image}\n          src={memories}\n          alt=\"memories\"\n          height=\"60\"\n        />\n      </div>\n      <Toolbar className={classes.toolbar}>\n        {user ? (\n            <div className={classes.profile}>\n                <Avatar className={classes.purple} alt={user.result.name} src={user.result.imageUrl}>{user.result.name.charAt(0)}</Avatar> {/* this is used to show the first character of the users name incase the user doesn't have an image*/}\n\n                <Typography className={classes.userName} variant=\"h6\">{user.result.name}</Typography>\n                <Button variant=\"contained\" className={classes.logout} color=\"secondary\" onClick={logout}>Log Out</Button>\n            </div>\n        ) : (         //Writing a conditional to show something if the user is logged in and show something else if the user is not logged in\n          // so if the user is logged in, we want to show the users info e.g the users avatar\n          <Button variant=\"contained\" component={Link} to=\"/auth\" color=\"primary\">Sign In</Button>\n\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Home/Home.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Auth/Auth.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/PostDetails/PostDetails.jsx",["119","120","121"],"import React,{useEffect} from \"react\";\nimport { Paper, Typography, CircularProgress, Divider } from '@material-ui/core';\nimport {useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nimport CommentSection from \"./CommentSection\";\nimport { getPost, getPostsBySearch } from '../../actions/posts';\nimport useStyles from './styles';\n\nconst PostDetails = () => {\n   const { post, isLoading, posts} = useSelector((state) => state.posts); //Getting the data about the post from the reducer.\n   const dispatch = useDispatch();\n   const navigate = useNavigate();\n   const classes = useStyles();\n   const { id } = useParams(); //Getting the Id \n\n\n   //LOGIC FOR FETCHING ONLY A SINGLE POSTS\n   useEffect(() => {\n      dispatch(getPost(id))\n   }, [id]); //This useEffect would happen when the id changes\n\n\n   //LOGIC FOR FETCHING RECOMMENDED POSTS // we'll be using the same endpoint we used for the (get post by search)\n\n   useEffect(() => {\n    if(post){\n      dispatch(getPostsBySearch({ search: 'none', tags: post?.tags.join(',')})) //search is none beacuse we aren't looking for search, we are looking for tags. The tags will be used to recomment the post\n    }\n   }, [post])\n\n   //These checks are making sure we don't render the page if we don't have the post already\n   if(!post) return null;\n\n   if(isLoading) {\n     return (\n       <Paper elevation={6} className={classes.loadingPaper}>\n        <CircularProgress size=\"7em\" />\n       </Paper>\n     )\n   }\n\n   const recommendedPosts = posts.filter(({ _id}) => _id !== post._id ); // we will destructure the _id and then we want to keep all the posts but removes the ones where the _id is not equal to the current post._id because the current post cannot be in it's own recommended post\n\n   const openPost = (_id) => navigate(`/posts/${_id}`)\n\n   return ( \n      <Paper style={{ padding: '20px', borderRadius: '15px' }} elevation={6}>\n        <div className={classes.card}>\n          <div className={classes.section}>\n            <Typography variant=\"h3\" component=\"h2\">{post.title}</Typography>\n            <Typography gutterBottom variant=\"h6\" color=\"textSecondary\" component=\"h2\">{post.tags.map((tag) => `#${tag} `)}</Typography>\n            <Typography gutterBottom variant=\"body1\" component=\"p\">{post.message}</Typography>\n            <Typography variant=\"h6\">Created by: {post.name}</Typography>\n            <Typography variant=\"body1\">{moment(post.createdAt).fromNow()}</Typography>\n            <Divider style={{ margin: '20px 0' }} />\n            <Typography variant=\"body1\"><strong>Realtime Chat - coming soon!</strong></Typography>\n            <Divider style={{ margin: '20px 0' }} />\n\n            {/* The comment section component would be passed here */}\n            <CommentSection post={post}/> \n\n            <Divider style={{ margin: '20px 0' }} />\n          </div>\n          <div className={classes.imageSection}>\n            <img className={classes.media} src={post.selectedFile || 'https://user-images.githubusercontent.com/194400/49531010-48dad180-f8b1-11e8-8d89-1e61320e1d82.png'} alt={post.title} />\n          </div>\n        </div>\n        {/* Reccomended post */}\n        { recommendedPosts.length && (\n          <div className={classes.section}>\n            <Typography gutterBottom variant=\"h5\">You might also like:</Typography>\n            <Divider/>\n            <div className={classes.recommendedPosts}>\n              {/* We map over the recommendedPosts and destructure all the things we need */}\n              {recommendedPosts.map(({ title, message, selectedFile, _id, likes, name}) => (\n                <div style={{ margin: '20px', cursor: 'pointer' }} onClick={() => openPost(_id)} key={_id}>\n                  <Typography gutterBottom variant=\"h6\">{title}</Typography>\n                  <Typography gutterBottom variant=\"subtitle2\">{name}</Typography>\n                  <Typography gutterBottom variant=\"subtitle2\">{message}</Typography>\n                  <Typography gutterBottom variant=\"h6\">{title}</Typography>\n                  <Typography gutterBottom variant=\"subtitle1\">Likes: {likes.length}</Typography>\n                  <img src={selectedFile} width=\"200px\"/>\n                </div>\n              ))} \n            </div>\n          </div>\n        )}\n      </Paper>\n   );\n}\n \nexport default PostDetails;","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/reducers/auth.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/reducers/posts.js",["122","123","124"],"import { FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE , DELETE, START_LOADING, END_LOADING, COMMENT } from '../constants/actionTypes';\n\n\n\nexport default (state = { isLoading: true, posts: [] }, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, isLoading: true };\n    case END_LOADING:\n      return { ...state, isLoading: false };\n    case FETCH_ALL:\n      return {  \n        ...state,\n        posts: action.payload.data, //here our post would be equal to action.payload.data\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages,\n      };\n    case CREATE: //for creating new posts\n      return {...state, posts:[ ...state.posts, action.payload]}; //the posts would be added to the action.payload\n      case START_LOADING:\n        return { ...state, isLoading: true };\n      case END_LOADING:\n        return { ...state, isLoading: false };\n    case FETCH_BY_SEARCH:\n      return {...state, posts: action.payload }\n    case FETCH_POST:\n      return {...state, post: action.payload }\n    case DELETE:\n      return {...state, posts:  state.posts.filter((post) => post._id !== action.payload )} // we're returning all the posts, but filtering out the one we deleted\n    case UPDATE:\n      return {...state, posts: state.posts.map((post) =>\n        post._id === action.payload._id ? action.payload : post\n      )};\n    case COMMENT:\n      return {\n        ...state, \n        posts: state.posts.map((post) => { //return all the other posts normally, and change the post that just received a comment\n          if(post._id === action.payload._id) return action.payload\n\n          return post;\n        })\n        };\n\n    default:\n      return state;\n  }\n};\n","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Navbar/styles.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/styles.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Auth/icon.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Auth/Input.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Auth/styles.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/actions/posts.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/actions/auth.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Form/Form.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Posts/Posts.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/PostDetails/styles.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Pagination.jsx",["125"],"import React, {useEffect} from \"react\";\nimport { Pagination, PaginationItem } from '@material-ui/lab';\nimport useStyles from './styles'; \nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from 'react-redux'; // allows us to dispatch redux actions\n\nimport { getPosts } from '../actions/posts'\n\nconst Paginate = ({page}) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const { numberOfPages } = useSelector((state) => state.posts); //getting the number of pages with use Selector\n    \n    useEffect(() => {\n        if(page) dispatch(getPosts(page));\n    }, [page]); //in this hook, we want to fetch the post anytime the page changes,\n    \n    return ( \n        <Pagination\n            classes={{ ul: classes.ul}}\n            count={numberOfPages} //this fetches the number of count depending on the number of pages we have.\n            page={Number(page) || 1 } \n            variant=\"outlined\"\n            color=\"primary\"\n            renderItem ={(item) => (\n                <PaginationItem {...item} component={Link} to={`/posts?page=${item.page}`}/>\n            )}\n        />\n     );\n}\n \nexport default Paginate;\n\n// Our current static pagination is now done, we'll import it inside the home component","/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/PostDetails/CommentSection.jsx",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/constants/actionTypes.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Form/styles.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Posts/styles.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/styles.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Posts/Post/Post.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/api/index.js",[],"/Users/kolade/Desktop/bogus/memmoir/memories/client/src/components/Posts/Post/styles.js",[],{"ruleId":"126","severity":1,"message":"127","line":44,"column":6,"nodeType":"128","endLine":44,"endColumn":16,"suggestions":"129"},{"ruleId":"126","severity":1,"message":"130","line":22,"column":7,"nodeType":"128","endLine":22,"endColumn":11,"suggestions":"131"},{"ruleId":"126","severity":1,"message":"130","line":31,"column":7,"nodeType":"128","endLine":31,"endColumn":13,"suggestions":"132"},{"ruleId":"133","severity":1,"message":"134","line":84,"column":19,"nodeType":"135","endLine":84,"endColumn":58},{"ruleId":"136","severity":1,"message":"137","line":5,"column":1,"nodeType":"138","endLine":47,"endColumn":3},{"ruleId":"139","severity":1,"message":"140","line":20,"column":7,"nodeType":"141","messageId":"142","endLine":21,"endColumn":46},{"ruleId":"139","severity":1,"message":"140","line":22,"column":7,"nodeType":"141","messageId":"142","endLine":23,"endColumn":47},{"ruleId":"126","severity":1,"message":"130","line":16,"column":8,"nodeType":"128","endLine":16,"endColumn":14,"suggestions":"143"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'logout' and 'user?.token'. Either include them or remove the dependency array.","ArrayExpression",["144"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["145"],["146"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected",["147"],{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},"Update the dependencies array to be: [location, logout, user?.token]",{"range":"156","text":"157"},"Update the dependencies array to be: [dispatch, id]",{"range":"158","text":"159"},"Update the dependencies array to be: [dispatch, post]",{"range":"160","text":"161"},"Update the dependencies array to be: [dispatch, page]",{"range":"162","text":"163"},[1273,1283],"[location, logout, user?.token]",[818,822],"[dispatch, id]",[1244,1250],"[dispatch, post]",[612,618],"[dispatch, page]"]