{"ast":null,"code":"import React from\"react\";import{TextField,Grid,InputAdornment,IconButton}from\"@material-ui/core\";import Visibility from'@material-ui/icons/Visibility';import VisibilityOff from'@material-ui/icons/VisibilityOff';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Input=function Input(_ref){var label=_ref.label,name=_ref.name,handleChange=_ref.handleChange,handleShowPassword=_ref.handleShowPassword,autoFocus=_ref.autoFocus,type=_ref.type,half=_ref.half;// This props would enable us have dynamic values\nreturn/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,sm:half?6:12,children:[\" \",/*#__PURE__*/_jsx(TextField,{name:name,onChange:handleChange,variant:\"outlined\",required:true,fullWidth:true,label:label,autoFocus:autoFocus,type:type,InputProps:name==='password'?{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(IconButton,{onClick:handleShowPassword,children:type==='password'?/*#__PURE__*/_jsx(Visibility,{}):/*#__PURE__*/_jsx(VisibilityOff,{})})})}:null//For show password icon\n})]});};export default Input;//we are creating a Grid that all of our items would have, this would save the trouble of writing it multiple times\n// when we have some components that look a behave the same, we create a new custom component that will generalize the logic by. This will be a component that will hold similar details and we'll just specify the things that change.\n// In javascript, when there's a ternary operator with the second value being null, use && and you won't have to provide the null.","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/src/components/Auth/Input.js"],"names":["React","TextField","Grid","InputAdornment","IconButton","Visibility","VisibilityOff","Input","label","name","handleChange","handleShowPassword","autoFocus","type","half","endAdornment"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,SAAT,CAAoBC,IAApB,CAA0BC,cAA1B,CAA0CC,UAA1C,KAA4D,mBAA5D,CAEA,MAAOC,CAAAA,UAAP,KAAuB,+BAAvB,CACA,MAAOC,CAAAA,aAAP,KAA0B,kCAA1B,C,wFAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,MAA8E,IAA3EC,CAAAA,KAA2E,MAA3EA,KAA2E,CAApEC,IAAoE,MAApEA,IAAoE,CAA9DC,YAA8D,MAA9DA,YAA8D,CAAhDC,kBAAgD,MAAhDA,kBAAgD,CAA5BC,SAA4B,MAA5BA,SAA4B,CAAjBC,IAAiB,MAAjBA,IAAiB,CAAXC,IAAW,MAAXA,IAAW,CAAE;AAC1F,mBACI,MAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,CAAmB,EAAE,CAAEA,IAAI,CAAG,CAAH,CAAO,EAAlC,4BAEA,KAAC,SAAD,EACI,IAAI,CAAEL,IADV,CAEI,QAAQ,CAAEC,YAFd,CAGI,OAAO,CAAC,UAHZ,CAII,QAAQ,KAJZ,CAKI,SAAS,KALb,CAMI,KAAK,CAAEF,KANX,CAOI,SAAS,CAAEI,SAPf,CAQI,IAAI,CAAEC,IARV,CASI,UAAU,CAAGJ,IAAI,GAAK,UAAT,CAAsB,CAC/BM,YAAY,cACR,KAAC,cAAD,EAAgB,QAAQ,CAAC,KAAzB,uBACI,KAAC,UAAD,EAAY,OAAO,CAAEJ,kBAArB,UACME,IAAI,GAAK,UAAT,cAAsB,KAAC,UAAD,IAAtB,cAAsC,KAAC,aAAD,IAD5C,EADJ,EAF2B,CAAtB,CAQT,IAAO;AAjBf,EAFA,GADJ,CAyBH,CA1BD,CA4BA,cAAeN,CAAAA,KAAf,CAEA;AAEA;AAGA","sourcesContent":["import React from \"react\";\nimport { TextField, Grid, InputAdornment, IconButton } from \"@material-ui/core\";\n\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\n\nconst Input = ({ label, name, handleChange, handleShowPassword, autoFocus, type, half }) => { // This props would enable us have dynamic values\n    return ( \n        <Grid item xs={12} sm={half ? 6 : 12 }> {/* e.g if we want some inputs to take half the width, we'll have a special prop ( half ) so if half is true we want it to take half the width which is 6 else it should remain the initial width set which is 12 */}\n\n        <TextField\n            name={name}\n            onChange={handleChange}\n            variant=\"outlined\"\n            required\n            fullWidth\n            label={label}\n            autoFocus={autoFocus}\n            type={type}\n            InputProps={ name === 'password' ? {  \n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        <IconButton onClick={handleShowPassword}>\n                            { type === 'password' ? <Visibility/> : <VisibilityOff/> }\n                            </IconButton>\n                    </InputAdornment>\n                ),\n            } : null } //For show password icon\n        />\n\n        </Grid>\n     );\n}\n \nexport default Input;\n\n//we are creating a Grid that all of our items would have, this would save the trouble of writing it multiple times\n\n// when we have some components that look a behave the same, we create a new custom component that will generalize the logic by. This will be a component that will hold similar details and we'll just specify the things that change.\n\n\n// In javascript, when there's a ternary operator with the second value being null, use && and you won't have to provide the null."]},"metadata":{},"sourceType":"module"}