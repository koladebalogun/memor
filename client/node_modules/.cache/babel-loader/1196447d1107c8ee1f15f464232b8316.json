{"ast":null,"code":"import _slicedToArray from\"/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{Link}from\"react-router-dom\";import{AppBar,Avatar,Button,Toolbar,Typography}from\"@material-ui/core\";import{useDispatch}from'react-redux';import{useLocation,useNavigate}from\"react-router\";import decode from'jwt-decode';//***************** */\nimport useStyles from\"./styles\";import memories from\"../../images/memories.png\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Navbar=function Navbar(){var classes=useStyles();var dispatch=useDispatch();var navigate=useNavigate();var location=useLocation();var _useState=useState(JSON.parse(localStorage.getItem('profile'))),_useState2=_slicedToArray(_useState,2),user=_useState2[0],setUser=_useState2[1];//Here, we are retrieving the user data ('profile') set in the local storage\nconsole.log(user);var logout=function logout(){dispatch({type:'LOGOUT'});navigate('/');setUser(null);};useEffect(function(){var token=user===null||user===void 0?void 0:user.token;// we're checking if token exist and if it does, we are sending it to the token variable \n//checking to see if the token has expired so we can log the user out\nif(token){var decodedToken=decode(token);if(decodedToken.exp*1000<new Date().getTime())logout();}setUser(JSON.parse(localStorage.getItem('profile')));},[location]);//The useLocation is like a usestate that returns a new location. Whenever the URL changes, a new location object will be returned. so in this block of code, we want the the user to be set when location changes.\nreturn/*#__PURE__*/_jsxs(AppBar,{className:classes.appBar,position:\"static\",color:\"inherit\",children:[/*#__PURE__*/_jsxs(\"div\",{className:classes.brandContainer,children:[/*#__PURE__*/_jsx(Typography,{component:Link,to:\"/\"//This is a link pointing to the homepage\n,className:classes.heading,variant:\"h2\",align:\"center\",children:\"Memories\"}),/*#__PURE__*/_jsx(\"img\",{className:classes.image,src:memories,alt:\"memories\",height:\"60\"})]}),/*#__PURE__*/_jsx(Toolbar,{className:classes.toolbar,children:user?/*#__PURE__*/_jsxs(\"div\",{className:classes.profile,children:[/*#__PURE__*/_jsx(Avatar,{className:classes.purple,alt:user.result.name,src:user.result.imageUrl,children:user.result.name.charAt(0)}),\" \",/*#__PURE__*/_jsx(Typography,{className:classes.userName,variant:\"h6\",children:user.result.name}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",className:classes.logout,color:\"secondary\",onClick:logout,children:\"Log Out\"})]}):/*#__PURE__*/ //Writing a conditional to show something if the user is logged in and show something else if the user is not logged in\n// so if the user is logged in, we want to show the users info e.g the users avatar\n_jsx(Button,{variant:\"contained\",component:Link,to:\"/auth\",color:\"primary\",children:\"Sign In\"})})]});};export default Navbar;","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/src/components/Navbar/Navbar.js"],"names":["React","useEffect","useState","Link","AppBar","Avatar","Button","Toolbar","Typography","useDispatch","useLocation","useNavigate","decode","useStyles","memories","Navbar","classes","dispatch","navigate","location","JSON","parse","localStorage","getItem","user","setUser","console","log","logout","type","token","decodedToken","exp","Date","getTime","appBar","brandContainer","heading","image","toolbar","profile","purple","result","name","imageUrl","charAt","userName"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\"\nimport { AppBar, Avatar, Button, Toolbar, Typography } from \"@material-ui/core\";\nimport { useDispatch } from 'react-redux'\nimport { useLocation, useNavigate } from \"react-router\";\n\nimport decode from 'jwt-decode'; //***************** */\n\n\n\nimport useStyles from \"./styles\";\nimport memories from \"../../images/memories.png\";\n\nconst Navbar = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [ user, setUser ] = useState(JSON.parse(localStorage.getItem('profile'))); //Here, we are retrieving the user data ('profile') set in the local storage\n\n  console.log(user);\n\n  const logout = () => {\n    dispatch({ type: 'LOGOUT' });\n\n    navigate('/');\n\n    setUser(null);\n  }\n\n  useEffect(() => {\n    const token = user?.token // we're checking if token exist and if it does, we are sending it to the token variable \n\n    //checking to see if the token has expired so we can log the user out\n    if(token) {\n      const decodedToken = decode(token);\n\n      if(decodedToken.exp * 1000 < new Date().getTime()) logout();\n    }\n\n    setUser(JSON.parse(localStorage.getItem('profile')));\n\n  }, [location]);  //The useLocation is like a usestate that returns a new location. Whenever the URL changes, a new location object will be returned. so in this block of code, we want the the user to be set when location changes.\n\n\n  return (\n    <AppBar className={classes.appBar} position=\"static\" color=\"inherit\">\n      <div className={classes.brandContainer}>\n        <Typography \n        component={Link} to=\"/\" //This is a link pointing to the homepage\n        className={classes.heading} \n        variant=\"h2\" \n        align=\"center\">\n          Memories\n        </Typography>\n        <img\n          className={classes.image}\n          src={memories}\n          alt=\"memories\"\n          height=\"60\"\n        />\n      </div>\n      <Toolbar className={classes.toolbar}>\n        {user ? (\n            <div className={classes.profile}>\n                <Avatar className={classes.purple} alt={user.result.name} src={user.result.imageUrl}>{user.result.name.charAt(0)}</Avatar> {/* this is used to show the first character of the users name incase the user doesn't have an image*/}\n\n                <Typography className={classes.userName} variant=\"h6\">{user.result.name}</Typography>\n                <Button variant=\"contained\" className={classes.logout} color=\"secondary\" onClick={logout}>Log Out</Button>\n            </div>\n        ) : (         //Writing a conditional to show something if the user is logged in and show something else if the user is not logged in\n          // so if the user is logged in, we want to show the users info e.g the users avatar\n          <Button variant=\"contained\" component={Link} to=\"/auth\" color=\"primary\">Sign In</Button>\n\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n"]},"metadata":{},"sourceType":"module"}