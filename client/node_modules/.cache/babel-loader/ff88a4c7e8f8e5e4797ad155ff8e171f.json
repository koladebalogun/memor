{"ast":null,"code":"var _jsxFileName = \"/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Posts/Post/Post.js\",\n    _s = $RefreshSig$();\n\n// ****\nimport React, { useState } from \"react\";\nimport { Card, CardActions, CardContent, CardMedia, Button, Typography, ButtonBase } from '@material-ui/core/';\nimport ThumbUpAltIcon from \"@material-ui/icons/ThumbUpAlt\";\nimport ThumbUpAltOutlined from '@material-ui/icons/ThumbUpAltOutlined';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport { useNavigate } from 'react-router-dom';\nimport moment from \"moment\";\nimport useStyles from \"./styles\";\nimport { useDispatch } from 'react-redux';\nimport { deletePost, likePost } from \"../../../actions/posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Post = _ref => {\n  _s();\n\n  var _user$result3, _user$result4, _user$result5, _user$result6;\n\n  let {\n    post,\n    setCurrentId\n  } = _ref;\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [likes, setLikes] = useState(post === null || post === void 0 ? void 0 : post.likes);\n  const user = JSON.parse(localStorage.getItem('profile')); //creating a subcomponent that will handle our like and likes \n  //* we'll pass the like subcomponent into the like button code block \n\n  const Likes = () => {\n    if (post.likes.length > 0) {\n      return post.likes.find(like => {\n        var _user$result, _user$result2;\n\n        return like === ((user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.googleId) || (user === null || user === void 0 ? void 0 : (_user$result2 = user.result) === null || _user$result2 === void 0 ? void 0 : _user$result2._id));\n      }) //Here we are checking if a current user liked a post or not\n      ?\n      /*#__PURE__*/\n      //Here we are checking if the likes array contains the id of the current user (either the google-id or the custom-id from the data base)\n      _jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ThumbUpAltIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), \"\\xA0\", post.likes.length > 2 ? `You and ${post.likes.length - 1} others` : `${post.likes.length} like${post.likes.length > 1 ? 's' : ''}`]\n      }, void 0, true) //we'll have a message saying 'You and a certain number of people liked something or the has 1 or multiple likes\n      : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ThumbUpAltOutlined, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), \"\\xA0\", post.likes.length, \" \", post.likes.length === 1 ? 'Like' : 'Likes']\n      }, void 0, true) //And if the person didn't like it, we'll just say number of like or likes\n      ;\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ThumbUpAltOutlined, {\n        fontSize: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 14\n      }, this), \"\\xA0Like\"]\n    }, void 0, true); //And if the user is the first to like it, it will just show like\n  };\n\n  const openPost = () => {\n    navigate(`/posts/${post._id}`); //opening the post details of the post that is currently selected with the id, by navigating to that id\n  };\n\n  const handleLike = async () => {\n    dispatch(like);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.card,\n    raised: true,\n    elevation: 6,\n    children: [/*#__PURE__*/_jsxDEV(ButtonBase, {\n      className: classes.cardAction,\n      onClick: openPost,\n      children: [\" \", /*#__PURE__*/_jsxDEV(CardMedia, {\n        className: classes.media,\n        image: post.selectedFile,\n        title: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.overlay,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: post.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: moment(post.createdAt).fromNow()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this), ((user === null || user === void 0 ? void 0 : (_user$result3 = user.result) === null || _user$result3 === void 0 ? void 0 : _user$result3.googleId) === (post === null || post === void 0 ? void 0 : post.creator) || (user === null || user === void 0 ? void 0 : (_user$result4 = user.result) === null || _user$result4 === void 0 ? void 0 : _user$result4._id) === (post === null || post === void 0 ? void 0 : post.creator)) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.overlay2,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            color: \"white\"\n          },\n          size: \"small\",\n          onClick: () => setCurrentId(post._id),\n          children: [\" \", /*#__PURE__*/_jsxDEV(MoreHorizIcon, {\n            fontSize: \"medium\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.details,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          children: post.tags.map(tag => `#${tag} `)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.title,\n        variant: \"h5\",\n        gutterBottom: true,\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          component: \"p\",\n          children: post.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n      className: classes.cardActions,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        color: \"primary\",\n        disabled: !(user === null || user === void 0 ? void 0 : user.result),\n        onClick: handleLike,\n        children: [/*#__PURE__*/_jsxDEV(Likes, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), ((user === null || user === void 0 ? void 0 : (_user$result5 = user.result) === null || _user$result5 === void 0 ? void 0 : _user$result5.googleId) === (post === null || post === void 0 ? void 0 : post.creator) || (user === null || user === void 0 ? void 0 : (_user$result6 = user.result) === null || _user$result6 === void 0 ? void 0 : _user$result6._id) === (post === null || post === void 0 ? void 0 : post.creator)) && /*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        color: \"primary\",\n        onClick: () => dispatch(deletePost(post._id)),\n        children: [/*#__PURE__*/_jsxDEV(DeleteIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), \"Delete\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Post, \"mr9vJyXhYCMQq3vI9ej2adjt9to=\", false, function () {\n  return [useStyles, useNavigate, useDispatch];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Posts/Post/Post.js"],"names":["React","useState","Card","CardActions","CardContent","CardMedia","Button","Typography","ButtonBase","ThumbUpAltIcon","ThumbUpAltOutlined","DeleteIcon","MoreHorizIcon","useNavigate","moment","useStyles","useDispatch","deletePost","likePost","Post","post","setCurrentId","classes","navigate","dispatch","likes","setLikes","user","JSON","parse","localStorage","getItem","Likes","length","find","like","result","googleId","_id","openPost","handleLike","card","cardAction","media","selectedFile","title","overlay","name","createdAt","fromNow","creator","overlay2","color","details","tags","map","tag","message","cardActions"],"mappings":"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","sourcesContent":["// ****\nimport React, { useState } from \"react\";\nimport { Card, CardActions, CardContent, CardMedia, Button, Typography, ButtonBase } from '@material-ui/core/';\nimport ThumbUpAltIcon from \"@material-ui/icons/ThumbUpAlt\";\nimport ThumbUpAltOutlined from '@material-ui/icons/ThumbUpAltOutlined';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport { useNavigate } from 'react-router-dom';\nimport moment from \"moment\";\nimport useStyles from \"./styles\";\nimport { useDispatch } from 'react-redux'\n\nimport { deletePost, likePost } from \"../../../actions/posts\";\n\nconst Post = ({ post, setCurrentId }) => {\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [ likes, setLikes ] = useState(post?.likes);\n\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n\n  //creating a subcomponent that will handle our like and likes \n  //* we'll pass the like subcomponent into the like button code block \n  const Likes = () => {\n    if (post.likes.length > 0) {\n      return post.likes.find((like) => like === (user?.result?.googleId || user?.result?._id)) //Here we are checking if a current user liked a post or not\n        ? ( //Here we are checking if the likes array contains the id of the current user (either the google-id or the custom-id from the data base)\n          <><ThumbUpAltIcon fontSize=\"small\" />&nbsp;{post.likes.length > 2 ? `You and ${post.likes.length - 1} others` : `${post.likes.length} like${post.likes.length > 1 ? 's' : ''}` }</> //we'll have a message saying 'You and a certain number of people liked something or the has 1 or multiple likes\n        ) : (\n          <><ThumbUpAltOutlined fontSize=\"small\" />&nbsp;{post.likes.length} {post.likes.length === 1 ? 'Like' : 'Likes'}</> //And if the person didn't like it, we'll just say number of like or likes\n        );\n    }\n\n    return <><ThumbUpAltOutlined fontSize=\"small\" />&nbsp;Like</>; //And if the user is the first to like it, it will just show like\n  };\n\n  const openPost = () => {\n    navigate(`/posts/${post._id}`); //opening the post details of the post that is currently selected with the id, by navigating to that id\n  };\n\n  const handleLike = async() => {\n    dispatch(like)\n  }\n\n\n  return (\n    <Card className={classes.card} raised elevation={6}>\n      <ButtonBase className={classes.cardAction} onClick={openPost}> {/* This Buttonbase would allow us view more details about any card we click */}\n      <CardMedia\n        className={classes.media}\n        image={post.selectedFile}\n        title={post.title}\n      />\n      <div className={classes.overlay}>\n        <Typography variant=\"h6\">{post.name}</Typography> {/******* */}\n        <Typography variant=\"body2\">\n          {moment(post.createdAt).fromNow()}\n        </Typography>\n      </div>\n\n      {/*We are checking if the post was created by the current user, only then do we want to show the edit button */}\n      {(user?.result?.googleId === post?.creator || user?.result?._id === post?.creator) && (\n        <div className={classes.overlay2}> \n          <Button\n            style={{ color: \"white\" }}\n            size=\"small\"\n            onClick={() => setCurrentId(post._id)}\n          >\n            {\" \"}\n            {/* For editing the post */}\n            <MoreHorizIcon fontSize=\"medium\" />\n          </Button>\n        </div>\n      )}\n      \n      <div className={classes.details}>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {post.tags.map((tag) => `#${tag} `)}\n        </Typography>{\" \"}\n        {/* adding hashtags to our tags */}\n      </div>\n      <Typography className={classes.title} variant=\"h5\" gutterBottom>\n        {post.title }\n      </Typography>\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {post.message}\n        </Typography>\n      </CardContent>\n      </ButtonBase>\n      <CardActions className={classes.cardActions}>\n\n        {/* we'll pass the like subcomponent into the like button */}\n        <Button size=\"small\" color=\"primary\" disabled={!user?.result} onClick={handleLike}>\n          <Likes/> {/* we'll pass the like subcomponent into the button */}\n        </Button>\n\n        {/*We are checking if the post was created by the current user, only then do we want to show the delete button */}\n        {(user?.result?.googleId === post?.creator || user?.result?._id === post?.creator) && (\n          <Button size=\"small\" color=\"primary\" onClick={() => dispatch(deletePost(post._id))}>\n            <DeleteIcon fontSize=\"small\" />\n            Delete\n          </Button>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}