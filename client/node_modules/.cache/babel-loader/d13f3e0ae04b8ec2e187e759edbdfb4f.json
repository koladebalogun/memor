{"ast":null,"code":"// A reducer is a function that accepts the state and action then based on the action type, it carries out a logic\nimport { FETCH_ALL, FETCH_BY_SEARCH, CREATE, UPDATE, DELETE, START_LOADING, END_LOADING } from \"../constants/actionTypes\"; // This is where we recreate our actions\n\nexport default (function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    isLoading: true,\n    posts: []\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    //FOR NORMAL POSTS\n    // case FETCH_ALL: //for fetching all post\n    //   return action.payload;\n    case START_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case END_LOADING:\n      return { ...state,\n        isLoading: false\n      };\n    //****FOR POSTS WITH PAGES */\n\n    case FETCH_ALL:\n      return { ...state,\n        posts: action.payload.data,\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages\n      };\n\n    case FETCH_BY_SEARCH:\n      return { ...state,\n        posts: action.payload.data\n      };\n\n    case CREATE:\n      //for creating new posts\n      return { ...state,\n        posts: [...state.posts, action.payload]\n      };\n    //the posts would be added to the action.payload\n\n    case \"START_LOADING\":\n      return { ...state,\n        isLoading: true\n      };\n\n    case \"END_LOADING\":\n      return { ...state,\n        isLoading: false\n      };\n\n    case DELETE:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== action.payload)\n      };\n    // we're returning all the posts, but filtering out the one we deleted\n\n    case UPDATE:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    default:\n      return state;\n  }\n}); //Note\n//For the UPDATE CASE\n//*action.payload is the updated post** so if\n//the post id is equal to action.payload id, we want to return the action.payload. Because action.payload is the newly updated post. else we return the post as it was without any updates ***** */","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/reducers/posts.js"],"names":["FETCH_ALL","FETCH_BY_SEARCH","CREATE","UPDATE","DELETE","START_LOADING","END_LOADING","state","isLoading","posts","action","type","payload","data","currentPage","numberOfPages","filter","post","_id","map"],"mappings":"AAAA;AAEA,SACEA,SADF,EAEEC,eAFF,EAGEC,MAHF,EAIEC,MAJF,EAKEC,MALF,EAMEC,aANF,EAOEC,WAPF,QAQO,0BARP,C,CAUA;;AACA,gBAAe,YAAoD;AAAA,MAAnDC,KAAmD,uEAA3C;AAAEC,IAAAA,SAAS,EAAE,IAAb;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAA2C;AAAA,MAAXC,MAAW;;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE;AACA;AACA;AACA,SAAKN,aAAL;AACE,aAAO,EAAE,GAAGE,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACF,SAAKF,WAAL;AACE,aAAO,EAAE,GAAGC,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;AACF;;AACA,SAAKR,SAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELE,QAAAA,KAAK,EAAEC,MAAM,CAACE,OAAP,CAAeC,IAFjB;AAGLC,QAAAA,WAAW,EAAEJ,MAAM,CAACE,OAAP,CAAeE,WAHvB;AAILC,QAAAA,aAAa,EAAEL,MAAM,CAACE,OAAP,CAAeG;AAJzB,OAAP;;AAMF,SAAKd,eAAL;AACE,aAAO,EAAE,GAAGM,KAAL;AAAYE,QAAAA,KAAK,EAAEC,MAAM,CAACE,OAAP,CAAeC;AAAlC,OAAP;;AACF,SAAKX,MAAL;AAAa;AACX,aAAO,EAAE,GAAGK,KAAL;AAAYE,QAAAA,KAAK,EAAE,CAAC,GAAGF,KAAK,CAACE,KAAV,EAAiBC,MAAM,CAACE,OAAxB;AAAnB,OAAP;AAA8D;;AAChE,SAAK,eAAL;AACE,aAAO,EAAE,GAAGL,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACF,SAAK,aAAL;AACE,aAAO,EAAE,GAAGD,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AAEF,SAAKJ,MAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYO,MAAZ,CAAoBC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaR,MAAM,CAACE,OAAjD;AAFF,OAAP;AAGG;;AACL,SAAKT,MAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYU,GAAZ,CAAiBF,IAAD,IACrBA,IAAI,CAACC,GAAL,KAAaR,MAAM,CAACE,OAAP,CAAeM,GAA5B,GAAkCR,MAAM,CAACE,OAAzC,GAAmDK,IAD9C;AAFF,OAAP;;AAOF;AACE,aAAOV,KAAP;AAvCJ;AAyCD,CA1CD,E,CA4CA;AACA;AACA;AACA","sourcesContent":["// A reducer is a function that accepts the state and action then based on the action type, it carries out a logic\n\nimport {\n  FETCH_ALL,\n  FETCH_BY_SEARCH,\n  CREATE,\n  UPDATE,\n  DELETE,\n  START_LOADING,\n  END_LOADING,\n} from \"../constants/actionTypes\";\n\n// This is where we recreate our actions\nexport default (state = { isLoading: true, posts: [] }, action) => {\n  switch (action.type) {\n    //FOR NORMAL POSTS\n    // case FETCH_ALL: //for fetching all post\n    //   return action.payload;\n    case START_LOADING:\n      return { ...state, isLoading: true };\n    case END_LOADING:\n      return { ...state, isLoading: false };\n    //****FOR POSTS WITH PAGES */\n    case FETCH_ALL:\n      return {\n        ...state,\n        posts: action.payload.data,\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages,\n      };\n    case FETCH_BY_SEARCH:\n      return { ...state, posts: action.payload.data };\n    case CREATE: //for creating new posts\n      return { ...state, posts: [...state.posts, action.payload] }; //the posts would be added to the action.payload\n    case \"START_LOADING\":\n      return { ...state, isLoading: true };\n    case \"END_LOADING\":\n      return { ...state, isLoading: false };\n\n    case DELETE:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post._id !== action.payload),\n      }; // we're returning all the posts, but filtering out the one we deleted\n    case UPDATE:\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === action.payload._id ? action.payload : post\n        ),\n      };\n\n    default:\n      return state;\n  }\n};\n\n//Note\n//For the UPDATE CASE\n//*action.payload is the updated post** so if\n//the post id is equal to action.payload id, we want to return the action.payload. Because action.payload is the newly updated post. else we return the post as it was without any updates ***** */\n"]},"metadata":{},"sourceType":"module"}