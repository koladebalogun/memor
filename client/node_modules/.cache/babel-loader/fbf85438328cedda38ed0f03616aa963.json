{"ast":null,"code":"// A reducer is a function that accepts the state and action then based on the action type, it carries out a logic\nexport default (function () {\n  let posts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'UPDATE':\n      return posts.map(post => post._id === action.payload._id ? action.payload : post);\n      {\n        /*action.payload is the updated post** so if the post id is equal to action.payload id, we want to return the action.payload. Because action.payload is the newly update */\n      }\n\n    case 'FETCH_ALL':\n      //for fetching all post\n      return action.payload;\n\n    case 'CREATE':\n      //for creating new posts\n      return [...posts, action.payload];\n    //the posts would be added to the action.payload\n\n    default:\n      return posts;\n  }\n});","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/reducers/posts.js"],"names":["posts","action","type","map","post","_id","payload"],"mappings":"AAAA;AACA,gBAAe,YAAwB;AAAA,MAAvBA,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,QAAL;AACA,aAAOF,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaJ,MAAM,CAACK,OAAP,CAAeD,GAA5B,GAAkCJ,MAAM,CAACK,OAAzC,GAAmDF,IAAvE,CAAP;AAAqF;AAAC;AAA4K;;AAClQ,SAAK,WAAL;AAAkB;AACd,aAAOH,MAAM,CAACK,OAAd;;AACJ,SAAK,QAAL;AAAe;AACX,aAAO,CAAE,GAAGN,KAAL,EAAYC,MAAM,CAACK,OAAnB,CAAP;AAAoC;;AACxC;AACI,aAAON,KAAP;AARR;AAUH,CAXD","sourcesContent":["// A reducer is a function that accepts the state and action then based on the action type, it carries out a logic\nexport default (posts = [], action) => {\n    switch (action.type) {\n        case 'UPDATE': \n        return posts.map((post) => post._id === action.payload._id ? action.payload : post); {/*action.payload is the updated post** so if the post id is equal to action.payload id, we want to return the action.payload. Because action.payload is the newly update */}\n        case 'FETCH_ALL': //for fetching all post\n            return action.payload;\n        case 'CREATE': //for creating new posts\n            return [ ...posts, action.payload ] //the posts would be added to the action.payload\n        default:\n            return posts;\n    }\n}"]},"metadata":{},"sourceType":"module"}