{"ast":null,"code":"import _objectSpread from\"/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{TextField,Button,Typography,Paper}from\"@material-ui/core\";import FileBase from\"react-file-base64\";import{useDispatch,useSelector}from\"react-redux\";//** */\nimport useStyles from\"./styles\";import{createPost,updatePost}from\"../../actions/posts\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Form=function Form(_ref){var currentId=_ref.currentId,setCurrentId=_ref.setCurrentId;var _useState=useState({title:'',message:'',tags:'',selectedFile:''}),_useState2=_slicedToArray(_useState,2),postData=_useState2[0],setPostData=_useState2[1];// updating the field of the form with the values of the post we want to update ****\n// const post = useSelector((state) => currentId ? state.posts.find((p) => p._id === currentId) : null); WITHOUT ADDING PAGES\nvar post=useSelector(function(state){return currentId?state.posts.posts.find(function(p){return p._id===currentId;}):null;});// if we have a current id, we want to loop over state.posts and we want to call a find method on them we want to find the post(p) that has the same id as the current id. if we don't have the current id, return null\nvar classes=useStyles();var dispatch=useDispatch();var user=JSON.parse(localStorage.getItem('profile'));// use the useEffect hook to populate the values of the form\nuseEffect(function(){if(post)setPostData(post);//if post exist, we'll setpostdata and populate it with the data of the post\nconsole.log(post);},[post]);var handleSubmit=function handleSubmit(e){e.preventDefault();if(currentId){var _user$result;dispatch(updatePost(currentId,_objectSpread(_objectSpread({},postData),{},{name:user===null||user===void 0?void 0:(_user$result=user.result)===null||_user$result===void 0?void 0:_user$result.name})));}else{var _user$result2;dispatch(createPost(_objectSpread(_objectSpread({},postData),{},{name:user===null||user===void 0?void 0:(_user$result2=user.result)===null||_user$result2===void 0?void 0:_user$result2.name})));// the name: will set set name of whoever created the post using the persons Id\n}};var clear=function clear(){setCurrentId(0);setPostData({title:\"\",message:\"\",tags:\"\",selectedFile:\"\"});};//creating a card to show something if there's no user logged in\nif(!user){/*#__PURE__*/_jsx(Paper,{className:classes.paper,children:/*#__PURE__*/_jsx(Typography,{variant:\"h6\",align:\"center\",children:\"Please sign in\"})});}return/*#__PURE__*/_jsx(Paper,{className:classes.paper,elevation:6,children:/*#__PURE__*/_jsxs(\"form\",{autoComplete:\"off\",noValidate:true,className:\"\".concat(classes.root,\" \").concat(classes.form,\" \"),onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"Creating a Memory\"}),/*#__PURE__*/_jsx(TextField,{name:\"title\",variant:\"outlined\",label:\"Title\",fullWidth:true,value:postData.title,onChange:function onChange(e){return setPostData(_objectSpread(_objectSpread({},postData),{},{title:e.target.value}));}// this will enable us change the value of this specific field\n}),/*#__PURE__*/_jsx(TextField,{name:\"message\",variant:\"outlined\",label:\"Message\",fullWidth:true,value:postData.message,onChange:function onChange(e){return setPostData(_objectSpread(_objectSpread({},postData),{},{message:e.target.value}));}// this will enable us change the value of this specific field\n}),/*#__PURE__*/_jsx(TextField,{name:\"tags\",variant:\"outlined\",label:\"Tags\",fullWidth:true,value:postData.tags,onChange:function onChange(e){return setPostData(_objectSpread(_objectSpread({},postData),{},{tags:e.target.value.split(',')}));}// this will enable us change the value of this specific field\n}),/*#__PURE__*/_jsx(\"div\",{className:classes.fileInput,children:/*#__PURE__*/_jsx(FileBase,{type:\"file\",multiple:false,onDone:function onDone(_ref2){var base64=_ref2.base64;return setPostData(_objectSpread(_objectSpread({},postData),{},{selectedFile:base64}));}})}),/*#__PURE__*/_jsx(Button,{className:classes.buttonSubmit,variant:\"contained\",color:\"primary\",size:\"large\",type:\"submit\",fullWidth:true,children:\"Submit\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"secondary\",size:\"small\",onClick:clear,fullWidth:true,children:\"Clear\"})]})});};export default Form;","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","FileBase","useDispatch","useSelector","useStyles","createPost","updatePost","Form","currentId","setCurrentId","title","message","tags","selectedFile","postData","setPostData","post","state","posts","find","p","_id","classes","dispatch","user","JSON","parse","localStorage","getItem","console","log","handleSubmit","e","preventDefault","name","result","clear","paper","root","form","target","value","split","fileInput","base64","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from \"react-file-base64\";\nimport { useDispatch, useSelector } from \"react-redux\"; //** */\nimport useStyles from \"./styles\";\nimport { createPost, updatePost } from \"../../actions/posts\";\n\nconst Form = ({ currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({ title: '', message: '', tags: '', selectedFile: '' });\n\n  // updating the field of the form with the values of the post we want to update ****\n  // const post = useSelector((state) => currentId ? state.posts.find((p) => p._id === currentId) : null); WITHOUT ADDING PAGES\n  const post = useSelector((state) => currentId ? state.posts.posts.find((p) => p._id === currentId) : null); \n  // if we have a current id, we want to loop over state.posts and we want to call a find method on them we want to find the post(p) that has the same id as the current id. if we don't have the current id, return null\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n\n  // use the useEffect hook to populate the values of the form\n  useEffect(() => {\n    if (post) setPostData(post); //if post exist, we'll setpostdata and populate it with the data of the post\n\n    console.log(post);\n  }, [post]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if(currentId) {\n      dispatch(updatePost(currentId, {...postData, name: user?.result?.name}));\n      \n    } else {\n      dispatch(createPost({ ...postData, name : user?.result?.name})); // the name: will set set name of whoever created the post using the persons Id\n    }\n  };\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: \"\",\n      message: \"\",\n      tags: \"\",\n      selectedFile: \"\",\n    });\n  };\n\n  //creating a card to show something if there's no user logged in\n  if(!user){\n    <Paper className={classes.paper}>\n      <Typography variant=\"h6\" align=\"center\">\n        Please sign in\n      </Typography>\n    </Paper>\n  }\n\n\n  return (\n    <Paper className={classes.paper} elevation={6}>\n      <form\n        autoComplete=\"off\"\n        noValidate\n        className={`${classes.root} ${classes.form} `}\n        onSubmit={handleSubmit}\n      >\n        <Typography variant=\"h6\">Creating a Memory</Typography>\n        {/* <TextField\n          name=\"creator\"\n          variant=\"outlined\"\n          label=\"Creator\"\n          fullWidth\n          value={postData.creator}\n          onChange={(e) =>\n            setPostData({ ...postData, creator: e.target.value })\n          } // this will enable us change the value of this specific field\n        /> */}\n        <TextField\n          name=\"title\"\n          variant=\"outlined\"\n          label=\"Title\"\n          fullWidth\n          value={postData.title}\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })} // this will enable us change the value of this specific field\n        />\n        <TextField\n          name=\"message\"\n          variant=\"outlined\"\n          label=\"Message\"\n          fullWidth\n          value={postData.message}\n          onChange={(e) =>\n            setPostData({ ...postData, message: e.target.value })\n          } // this will enable us change the value of this specific field\n        />\n        <TextField\n          name=\"tags\"\n          variant=\"outlined\"\n          label=\"Tags\"\n          fullWidth\n          value={postData.tags}\n          onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} // this will enable us change the value of this specific field\n        />\n        <div className={classes.fileInput}>\n          <FileBase\n            type=\"file\"\n            multiple={false}\n            onDone={({ base64 }) =>\n              setPostData({ ...postData, selectedFile: base64 })\n            }\n          />\n        </div>\n        <Button\n          className={classes.buttonSubmit}\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          type=\"submit\"\n          fullWidth\n        >\n          Submit\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          onClick={clear}\n          fullWidth\n        >\n          Clear\n        </Button>\n      </form>\n    </Paper>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}