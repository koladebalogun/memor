{"ast":null,"code":"import _toConsumableArray from\"/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Container,Grow,Grid,Paper,AppBar,TextField,Button}from\"@material-ui/core\";import{useDispatch}from'react-redux';// allows us to dispatch redux actions\nimport{useNavigate,useLocation}from'react-router-dom';import ChipInput from'material-ui-chip-input';import{getPostsBySearch}from'../../actions/posts';//^^^^^\nimport Pagination from'../Pagination';//^^\nimport useStyles from'../../styles';import Posts from\"../Posts/Posts\";import Form from\"../Form/Form\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function useQuery(){//setting up our url search param.this will help identify the page we currently and the search terms we are looking for\nreturn new URLSearchParams(useLocation().search);}var Home=function Home(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),currentId=_useState2[0],setCurrentId=_useState2[1];//**  it's null at the start because we don't have the id selected */\nvar classes=useStyles();var dispatch=useDispatch();//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvar query=useQuery();// this will let us use it as a hook.\nvar navigate=useNavigate();var page=query.get('page')||1;// getting our page info. This will read the url and see if we have a page parameter in there if so, it will populate this variable and if we don't have the page we'll be on the first one .//THE PAGE WOULD BE PASSED AS A PROP INTO THE PAGINATION COMPONENT\nvar searchQuery=query.get('searchQuery');var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),search=_useState4[0],setSearch=_useState4[1];// setting a state for our search fields\nvar _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),tags=_useState6[0],setTags=_useState6[1];// state for tag search\n//^^^^^^^^^^\n//********************************* */\n// useEffect(() => {\n//   dispatch(getPosts());\n// }, [currentId, dispatch]); //adding currentId as a dependency would mean we don't have to refresh everytime we make changes\n//********************************* */\n//^^^^^^^^^^^^^^^^^\nvar searchPost=function searchPost(){if(search.trim()||tags){//dispatch -> fetch search post\ndispatch(getPostsBySearch({search:search,tags:tags.join(',')}));//This action is taking the search query object that we specified, and we also provide tags which we have to render into a string that way it will be easier to pass data from the front to backend. because we cannot pass an array through the url parameters\nnavigate(\"/posts/search?searchQuery=\".concat(search||'none',\"&tags=\").concat(tags.join(',')));}else{navigate('/');}};var handleKeyPress=function handleKeyPress(e){if(e.keyCode===13){searchPost();//This would enable us use the enter key submit a search\n}};var handleAdd=function handleAdd(tag){setTags([].concat(_toConsumableArray(tags),[tag]));};var handleDelete=function handleDelete(tagToDelete){setTags(tags.filter(function(tag){return tag!==tagToDelete;}));};//^^^^^^^\nreturn/*#__PURE__*/_jsx(Grow,{in:true,children:/*#__PURE__*/_jsx(Container,{maxWidth:\"xl\",children:/*#__PURE__*/_jsxs(Grid,{container:true,className:classes.gridContainer,justifyContent:\"space-between\",alignItems:\"stretch\",spacing:3,children:[/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,sm:6,md:9,children:[/*#__PURE__*/_jsx(Posts,{setCurrentId:setCurrentId}),\" \"]}),/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,sm:6,md:3,children:[/*#__PURE__*/_jsxs(AppBar,{className:classes.appBarSearch,position:\"static\",color:\"inherit\",children:[/*#__PURE__*/_jsx(TextField,{name:\"search\",variant:\"outlined\",label:\"Search Memories\",fullWidth:true,onKeyPress:handleKeyPress,value:search,onChange:function onChange(e){return setSearch(e.target.value);}// This will enable us change the value of the search\n}),/*#__PURE__*/_jsx(ChipInput,{style:{margin:'10px 0'},value:tags//This value has to be dynamic, it has to be from state\n,onAdd:handleAdd,onDelete:handleDelete,label:\"Search Tags\",variant:\"outlined\"}),\" \",/*#__PURE__*/_jsx(Button,{onClick:searchPost,className:classes.searchButton,variant:\"contained\",color:\"primary\",children:\"Search\"})]}),/*#__PURE__*/_jsx(Form,{currentId:currentId,setCurrentId:setCurrentId}),\" \",!searchQuery&&!tags.length&&/*#__PURE__*/_jsx(Paper,{className:classes.pagination,elevation:6,children:/*#__PURE__*/_jsx(Pagination,{page:page})})]})]})})});};export default Home;","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/src/components/Home/Home.js"],"names":["React","useState","Container","Grow","Grid","Paper","AppBar","TextField","Button","useDispatch","useNavigate","useLocation","ChipInput","getPostsBySearch","Pagination","useStyles","Posts","Form","useQuery","URLSearchParams","search","Home","currentId","setCurrentId","classes","dispatch","query","navigate","page","get","searchQuery","setSearch","tags","setTags","searchPost","trim","join","handleKeyPress","e","keyCode","handleAdd","tag","handleDelete","tagToDelete","filter","gridContainer","appBarSearch","target","value","margin","searchButton","length","pagination"],"mappings":"sXAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,SAAT,CAAoBC,IAApB,CAA0BC,IAA1B,CAAgCC,KAAhC,CAAuCC,MAAvC,CAA+CC,SAA/C,CAA0DC,MAA1D,KAAwE,mBAAxE,CACA,OAASC,WAAT,KAA4B,aAA5B,CAA2C;AAC3C,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,kBAAzC,CACA,MAAOC,CAAAA,SAAP,KAAsB,wBAAtB,CAEA,OAASC,gBAAT,KAAiC,qBAAjC,CAAwD;AACxD,MAAOC,CAAAA,UAAP,KAAuB,eAAvB,CAAuC;AACvC,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,gBAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,cAAjB,C,wFAEA,QAASC,CAAAA,QAAT,EAAoB,CAAE;AACpB,MAAO,IAAIC,CAAAA,eAAJ,CAAoBR,WAAW,GAAGS,MAAlC,CAAP,CACD,CAED,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,CACjB,cAAkCpB,QAAQ,CAAC,IAAD,CAA1C,wCAAOqB,SAAP,eAAkBC,YAAlB,eAAkD;AAClD,GAAMC,CAAAA,OAAO,CAAGT,SAAS,EAAzB,CACA,GAAMU,CAAAA,QAAQ,CAAGhB,WAAW,EAA5B,CAEA;AACA,GAAMiB,CAAAA,KAAK,CAAGR,QAAQ,EAAtB,CAA0B;AAC1B,GAAMS,CAAAA,QAAQ,CAAIjB,WAAW,EAA7B,CACA,GAAMkB,CAAAA,IAAI,CAAGF,KAAK,CAACG,GAAN,CAAU,MAAV,GAAqB,CAAlC,CAAqC;AAErC,GAAMC,CAAAA,WAAW,CAAGJ,KAAK,CAACG,GAAN,CAAU,aAAV,CAApB,CACA,eAA8B5B,QAAQ,CAAC,EAAD,CAAtC,yCAAQmB,MAAR,eAAgBW,SAAhB,eAA4C;AAC5C,eAA0B9B,QAAQ,CAAC,EAAD,CAAlC,yCAAQ+B,IAAR,eAAcC,OAAd,eAAwC;AACxC;AAGA;AAEA;AACA;AACA;AAEA;AAGA;AACA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CAEvB,GAAGd,MAAM,CAACe,IAAP,IAAiBH,IAApB,CAA0B,CACxB;AACAP,QAAQ,CAACZ,gBAAgB,CAAC,CAAEO,MAAM,CAANA,MAAF,CAAUY,IAAI,CAAEA,IAAI,CAACI,IAAL,CAAU,GAAV,CAAhB,CAAD,CAAjB,CAAR,CAA6D;AAC7DT,QAAQ,qCAA8BP,MAAM,EAAI,MAAxC,kBAAuDY,IAAI,CAACI,IAAL,CAAU,GAAV,CAAvD,EAAR,CACD,CAJD,IAIK,CACHT,QAAQ,CAAC,GAAD,CAAR,CACD,CACF,CATD,CAWA,GAAMU,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,CAAD,CAAO,CAC5B,GAAGA,CAAC,CAACC,OAAF,GAAc,EAAjB,CAAsB,CACpBL,UAAU,GACV;AACD,CACF,CALD,CAOA,GAAMM,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,GAAD,CAAS,CACzBR,OAAO,8BAAMD,IAAN,GAAYS,GAAZ,GAAP,CACD,CAFD,CAIA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,WAAD,CAAiB,CACpCV,OAAO,CAACD,IAAI,CAACY,MAAL,CAAY,SAACH,GAAD,QAASA,CAAAA,GAAG,GAAKE,WAAjB,EAAZ,CAAD,CAAP,CACD,CAFD,CAIA;AACA,mBACE,KAAC,IAAD,EAAM,EAAE,KAAR,uBACE,KAAC,SAAD,EAAW,QAAQ,CAAC,IAApB,uBACE,MAAC,IAAD,EAAM,SAAS,KAAf,CAAgB,SAAS,CAAEnB,OAAO,CAACqB,aAAnC,CAAkD,cAAc,CAAC,eAAjE,CAAiF,UAAU,CAAC,SAA5F,CAAsG,OAAO,CAAE,CAA/G,wBACE,MAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,CAAmB,EAAE,CAAE,CAAvB,CAA0B,EAAE,CAAE,CAA9B,wBACE,KAAC,KAAD,EAAO,YAAY,CAAEtB,YAArB,EADF,CACwC,GADxC,GADF,cAKE,MAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAE,EAAf,CAAmB,EAAE,CAAE,CAAvB,CAA0B,EAAE,CAAE,CAA9B,wBACE,MAAC,MAAD,EAAQ,SAAS,CAAEC,OAAO,CAACsB,YAA3B,CAAyC,QAAQ,CAAC,QAAlD,CAA2D,KAAK,CAAC,SAAjE,wBACE,KAAC,SAAD,EACE,IAAI,CAAC,QADP,CAEE,OAAO,CAAC,UAFV,CAGE,KAAK,CAAC,iBAHR,CAIE,SAAS,KAJX,CAKE,UAAU,CAAET,cALd,CAME,KAAK,CAAEjB,MANT,CAOE,QAAQ,CAAE,kBAACkB,CAAD,QAAOP,CAAAA,SAAS,CAACO,CAAC,CAACS,MAAF,CAASC,KAAV,CAAhB,EAAkC;AAP9C,EADF,cAUE,KAAC,SAAD,EACE,KAAK,CAAE,CAAEC,MAAM,CAAE,QAAV,CADT,CAEE,KAAK,CAAEjB,IAAM;AAFf,CAGE,KAAK,CAAEQ,SAHT,CAIE,QAAQ,CAAEE,YAJZ,CAKE,KAAK,CAAC,aALR,CAME,OAAO,CAAC,UANV,EAVF,kBAkBE,KAAC,MAAD,EAAQ,OAAO,CAAER,UAAjB,CAA6B,SAAS,CAAEV,OAAO,CAAC0B,YAAhD,CAA8D,OAAO,CAAC,WAAtE,CAAkF,KAAK,CAAC,SAAxF,oBAlBF,GADF,cAqBE,KAAC,IAAD,EAAM,SAAS,CAAE5B,SAAjB,CAA4B,YAAY,CAAEC,YAA1C,EArBF,CAqB6D,GArB7D,CAyBK,CAACO,WAAD,EAAgB,CAACE,IAAI,CAACmB,MAAxB,eACD,KAAC,KAAD,EAAO,SAAS,CAAE3B,OAAO,CAAC4B,UAA1B,CAAsC,SAAS,CAAE,CAAjD,uBACE,KAAC,UAAD,EAAY,IAAI,CAAExB,IAAlB,EADF,EA1BF,GALF,GADF,EADF,EADF,CA2CD,CAhGD,CAkGA,cAAeP,CAAAA,IAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Container, Grow, Grid, Paper, AppBar, TextField, Button } from \"@material-ui/core\";\nimport { useDispatch } from 'react-redux'; // allows us to dispatch redux actions\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport ChipInput from 'material-ui-chip-input'\n\nimport { getPostsBySearch } from '../../actions/posts'; //^^^^^\nimport Pagination from '../Pagination' //^^\nimport useStyles from '../../styles';\nimport Posts from \"../Posts/Posts\";\nimport Form from \"../Form/Form\";\n\nfunction useQuery() { //setting up our url search param.this will help identify the page we currently and the search terms we are looking for\n  return new URLSearchParams(useLocation().search);\n}\n\nconst Home = () => {\n  const [currentId, setCurrentId] = useState(null); //**  it's null at the start because we don't have the id selected */\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  const query = useQuery(); // this will let us use it as a hook.\n  const navigate  = useNavigate();\n  const page = query.get('page') || 1; // getting our page info. This will read the url and see if we have a page parameter in there if so, it will populate this variable and if we don't have the page we'll be on the first one .//THE PAGE WOULD BE PASSED AS A PROP INTO THE PAGINATION COMPONENT\n\n  const searchQuery = query.get('searchQuery')\n  const [ search, setSearch ] = useState(''); // setting a state for our search fields\n  const [ tags, setTags ] = useState([]); // state for tag search\n  //^^^^^^^^^^\n\n\n  //********************************* */\n\n  // useEffect(() => {\n  //   dispatch(getPosts());\n  // }, [currentId, dispatch]); //adding currentId as a dependency would mean we don't have to refresh everytime we make changes\n\n  //********************************* */\n\n\n  //^^^^^^^^^^^^^^^^^\n  const searchPost = () => {\n\n    if(search.trim() || tags) {\n      //dispatch -> fetch search post\n      dispatch(getPostsBySearch({ search, tags: tags.join(',')})); //This action is taking the search query object that we specified, and we also provide tags which we have to render into a string that way it will be easier to pass data from the front to backend. because we cannot pass an array through the url parameters\n      navigate(`/posts/search?searchQuery=${search || 'none'}&tags=${tags.join(',')}`)\n    }else{\n      navigate('/');\n    }\n  }\n\n  const handleKeyPress = (e) => {\n    if(e.keyCode === 13 ) {\n      searchPost();\n      //This would enable us use the enter key submit a search\n    }\n  }\n\n  const handleAdd = (tag) => {\n    setTags([ ...tags, tag]); \n  }\n\n  const handleDelete = (tagToDelete) => {\n    setTags(tags.filter((tag) => tag !== tagToDelete));\n  };\n\n  //^^^^^^^\n  return (\n    <Grow in>\n      <Container maxWidth=\"xl\">\n        <Grid container className={classes.gridContainer} justifyContent=\"space-between\" alignItems=\"stretch\" spacing={3} >\n          <Grid item xs={12} sm={6} md={9}>\n            <Posts setCurrentId={setCurrentId} />{\" \"}\n            {/* passing the setter method (Methods which update a variable) which is the (setCurrentId) as props into the Posts component */}\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <AppBar className={classes.appBarSearch} position=\"static\" color=\"inherit\">\n              <TextField\n                name=\"search\"\n                variant=\"outlined\"\n                label=\"Search Memories\"\n                fullWidth\n                onKeyPress={handleKeyPress}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)} // This will enable us change the value of the search\n              />\n              <ChipInput\n                style={{ margin: '10px 0'}}\n                value={tags} //This value has to be dynamic, it has to be from state\n                onAdd={handleAdd}\n                onDelete={handleDelete}\n                label=\"Search Tags\"\n                variant=\"outlined\"\n              /> {/*^^ For searching by tags */}\n              <Button onClick={searchPost} className={classes.searchButton} variant='contained' color=\"primary\">Search</Button>\n            </AppBar>\n            <Form currentId={currentId} setCurrentId={setCurrentId} />{\" \"}\n            {/* passing the current Id as a prop into the form component. a setter method will be passed here as well  */}\n\n            {/* ^^^^ we are calling our pagination component below the form and if there's no search or tags, we don't want to show the pagination */}\n            {( !searchQuery && !tags.length) && (\n            <Paper className={classes.pagination} elevation={6}>\n              <Pagination page={page}/> \n            </Paper>\n            )}\n          </Grid>\n        </Grid>\n      </Container>\n    </Grow>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}