{"ast":null,"code":"var _jsxFileName = \"/Users/koladebalogun/Desktop/Memoirs project/client/src/components/PostDetails/PostDetails.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { Paper, Typography, CircularProgress, Divider } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { getPost, getPostsBySearch } from '../../actions/posts';\nimport useStyles from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostDetails = () => {\n  _s();\n\n  const {\n    post,\n    isLoading,\n    posts\n  } = useSelector(state => state.posts); //Getting the data about the post from the reducer.\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const classes = useStyles();\n  const {\n    id\n  } = useParams(); //Getting the Id \n  //LOGIC FOR FETCHING ONLY A SINGLE POSTS\n\n  useEffect(() => {\n    dispatch(getPost(id));\n  }, [id]); //This useEffect would happen when the id changes\n  //LOGIC FOR FETCHING RECOMMENDED POSTS // we'll be using the same endpoint we used for the (get post by search)\n\n  useEffect(() => {\n    if (post) {\n      dispatch(getPostsBySearch({\n        search: 'none',\n        tags: post === null || post === void 0 ? void 0 : post.tags.join(',')\n      })); //search is none beacuse we aren't looking for search, we are looking for tags. The tags will be used to recomment the post\n    }\n  }, [post]); //These checks are making sure we don't render the page if we don't have the post already\n\n  if (!post) return null;\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 6,\n      className: classes.loadingPaper,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: \"7em\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 8\n    }, this);\n  }\n\n  const recommendedPosts = posts.filter(_ref => {\n    let {\n      _id\n    } = _ref;\n    return _id === post._id;\n  }); // we will destructure the _id and then we want to keep all the posts but removes the ones where the _id is equal to the current post._id because the current post cannot be in it's own recommended post\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      style: {\n        padding: '20px',\n        borderRadius: '15px'\n      },\n      elevation: 6,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.card,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.section,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h3\",\n            component: \"h2\",\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            variant: \"h6\",\n            color: \"textSecondary\",\n            component: \"h2\",\n            children: post.tags.map(tag => `#${tag} `)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            variant: \"body1\",\n            component: \"p\",\n            children: post.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: [\"Created by: \", post.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: moment(post.createdAt).fromNow()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            style: {\n              margin: '20px 0'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Realtime Chat - coming soon!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            style: {\n              margin: '20px 0'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Comments - coming soon!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            style: {\n              margin: '20px 0'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.imageSection,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: classes.media,\n            src: post.selectedFile || 'https://user-images.githubusercontent.com/194400/49531010-48dad180-f8b1-11e8-8d89-1e61320e1d82.png',\n            alt: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }, this);\n};\n\n_s(PostDetails, \"ET6ZOYBrTlugRcNcRR8pZTHHN10=\", false, function () {\n  return [useSelector, useDispatch, useNavigate, useStyles, useParams];\n});\n\n_c = PostDetails;\nexport default PostDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostDetails\");","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/components/PostDetails/PostDetails.jsx"],"names":["React","useEffect","Paper","Typography","CircularProgress","Divider","useDispatch","useSelector","moment","useParams","useNavigate","getPost","getPostsBySearch","useStyles","PostDetails","post","isLoading","posts","state","dispatch","navigate","classes","id","search","tags","join","loadingPaper","recommendedPosts","filter","_id","padding","borderRadius","card","section","title","map","tag","message","name","createdAt","fromNow","margin","imageSection","media","selectedFile"],"mappings":"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","sourcesContent":["import React,{useEffect} from \"react\";\nimport { Paper, Typography, CircularProgress, Divider } from '@material-ui/core';\nimport {useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nimport { getPost, getPostsBySearch } from '../../actions/posts';\nimport useStyles from './styles';\n\nconst PostDetails = () => {\n   const { post, isLoading, posts} = useSelector((state) => state.posts); //Getting the data about the post from the reducer.\n   const dispatch = useDispatch();\n   const navigate = useNavigate();\n   const classes = useStyles();\n   const { id } = useParams(); //Getting the Id \n\n\n   //LOGIC FOR FETCHING ONLY A SINGLE POSTS\n   useEffect(() => {\n      dispatch(getPost(id))\n   }, [id]); //This useEffect would happen when the id changes\n\n\n   //LOGIC FOR FETCHING RECOMMENDED POSTS // we'll be using the same endpoint we used for the (get post by search)\n\n   useEffect(() => {\n    if(post){\n      dispatch(getPostsBySearch({ search: 'none', tags: post?.tags.join(',')})) //search is none beacuse we aren't looking for search, we are looking for tags. The tags will be used to recomment the post\n    }\n   }, [post])\n\n   //These checks are making sure we don't render the page if we don't have the post already\n   if(!post) return null;\n\n   if(isLoading) {\n     return (\n       <Paper elevation={6} className={classes.loadingPaper}>\n        <CircularProgress size=\"7em\" />\n       </Paper>\n     )\n   }\n\n   const recommendedPosts = posts.filter(({ _id}) => _id === post._id ); // we will destructure the _id and then we want to keep all the posts but removes the ones where the _id is equal to the current post._id because the current post cannot be in it's own recommended post\n\n   return ( \n      <div>\n        <Paper style={{ padding: '20px', borderRadius: '15px' }} elevation={6}>\n        <div className={classes.card}>\n          <div className={classes.section}>\n            <Typography variant=\"h3\" component=\"h2\">{post.title}</Typography>\n            <Typography gutterBottom variant=\"h6\" color=\"textSecondary\" component=\"h2\">{post.tags.map((tag) => `#${tag} `)}</Typography>\n            <Typography gutterBottom variant=\"body1\" component=\"p\">{post.message}</Typography>\n            <Typography variant=\"h6\">Created by: {post.name}</Typography>\n            <Typography variant=\"body1\">{moment(post.createdAt).fromNow()}</Typography>\n            <Divider style={{ margin: '20px 0' }} />\n            <Typography variant=\"body1\"><strong>Realtime Chat - coming soon!</strong></Typography>\n            <Divider style={{ margin: '20px 0' }} />\n            <Typography variant=\"body1\"><strong>Comments - coming soon!</strong></Typography>\n            <Divider style={{ margin: '20px 0' }} />\n          </div>\n          <div className={classes.imageSection}>\n            <img className={classes.media} src={post.selectedFile || 'https://user-images.githubusercontent.com/194400/49531010-48dad180-f8b1-11e8-8d89-1e61320e1d82.png'} alt={post.title} />\n          </div>\n        </div>\n      {/* Reccomended post */}\n      \n    </Paper>\n      </div>\n   );\n}\n \nexport default PostDetails;"]},"metadata":{},"sourceType":"module"}