{"ast":null,"code":"var _jsxFileName = \"/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Navbar/Navbar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AppBar, Avatar, Button, Toolbar, Typography } from \"@material-ui/core\";\nimport { useDispatch } from 'react-redux';\nimport { useLocation, useNavigate } from \"react-router\";\nimport useStyles from \"./styles\";\nimport memories from \"../../images/memories.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Navbar = () => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile'))); //Here, we are retrieving the user data ('profile') set in the local storage\n\n  console.log(user);\n\n  const logOut = () => {\n    dispatch({\n      type: 'LOGOUT'\n    });\n    navigator('/');\n    setUser(null);\n  };\n\n  useEffect(() => {\n    const token = user === null || user === void 0 ? void 0 : user.token; // we're checking if token exist and if it does, we are sending it to the token variable \n\n    setUser(JSON.parse(localStorage.getItem('profile')));\n  }, [location]); //when location\n\n  return /*#__PURE__*/_jsxDEV(AppBar, {\n    className: classes.appBar,\n    position: \"static\",\n    color: \"inherit\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.brandContainer,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: Link,\n        to: \"/\" //This is a link pointing to the homepage\n        ,\n        className: classes.heading,\n        variant: \"h2\",\n        align: \"center\",\n        children: \"Memories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: classes.image,\n        src: memories,\n        alt: \"memories\",\n        height: \"60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toolbar, {\n      className: classes.toolbar,\n      children: user ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.profile,\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          className: classes.purple,\n          alt: user.result.name,\n          src: user.result.imageUrl,\n          children: user.result.name.charAt(0)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.userName,\n          variant: \"h6\",\n          children: user.result.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          className: classes.logout,\n          color: \"secondary\",\n          onClick: logOut,\n          children: \"Log Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this) :\n      /*#__PURE__*/\n      //Writing a conditional to show something if the user is logged in and show something else if the user is not logged in\n      // so if the user is logged in, we want to show the users info e.g the users avatar\n      _jsxDEV(Button, {\n        variant: \"contained\",\n        component: Link,\n        to: \"/auth\",\n        color: \"primary\",\n        children: \"Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Navbar, \"ZbEpawixrfhvvZpeNPMXaZQatF8=\", false, function () {\n  return [useStyles, useDispatch, useNavigate, useLocation];\n});\n\n_c = Navbar;\nexport default Navbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Navbar/Navbar.js"],"names":["React","useEffect","useState","Link","AppBar","Avatar","Button","Toolbar","Typography","useDispatch","useLocation","useNavigate","useStyles","memories","Navbar","classes","dispatch","navigate","location","user","setUser","JSON","parse","localStorage","getItem","console","log","logOut","type","navigator","token","appBar","brandContainer","heading","image","toolbar","profile","purple","result","name","imageUrl","charAt","userName","logout"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\"\nimport { AppBar, Avatar, Button, Toolbar, Typography } from \"@material-ui/core\";\nimport { useDispatch } from 'react-redux'\nimport { useLocation, useNavigate } from \"react-router\";\n\n\n\nimport useStyles from \"./styles\";\nimport memories from \"../../images/memories.png\";\n\nconst Navbar = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [ user, setUser ] = useState(JSON.parse(localStorage.getItem('profile'))); //Here, we are retrieving the user data ('profile') set in the local storage\n\n  console.log(user);\n\n  const logOut = () => {\n    dispatch({ type: 'LOGOUT'});\n\n    navigator('/')\n\n    setUser(null);\n  }\n\n  useEffect(() => {\n    const token = user?.token // we're checking if token exist and if it does, we are sending it to the token variable \n\n    setUser(JSON.parse(localStorage.getItem('profile')));\n\n  }, [location]);  //when location\n\n  return (\n    <AppBar className={classes.appBar} position=\"static\" color=\"inherit\">\n      <div className={classes.brandContainer}>\n        <Typography \n        component={Link} to=\"/\" //This is a link pointing to the homepage\n        className={classes.heading} \n        variant=\"h2\" \n        align=\"center\">\n          Memories\n        </Typography>\n        <img\n          className={classes.image}\n          src={memories}\n          alt=\"memories\"\n          height=\"60\"\n        />\n      </div>\n      <Toolbar className={classes.toolbar}>\n        {user ? (\n            <div className={classes.profile}>\n                <Avatar className={classes.purple} alt={user.result.name} src={user.result.imageUrl}>{user.result.name.charAt(0)}</Avatar> {/* this is used to show the first character of the users name incase the user doesn't have an image*/}\n\n                <Typography className={classes.userName} variant=\"h6\">{user.result.name}</Typography>\n                <Button variant=\"contained\" className={classes.logout} color=\"secondary\" onClick={logOut}>Log Out</Button>\n            </div>\n        ) : (         //Writing a conditional to show something if the user is logged in and show something else if the user is not logged in\n                      // so if the user is logged in, we want to show the users info e.g the users avatar\n          <Button variant=\"contained\" component={Link} to=\"/auth\" color=\"primary\">Sign In</Button>\n\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n"]},"metadata":{},"sourceType":"module"}