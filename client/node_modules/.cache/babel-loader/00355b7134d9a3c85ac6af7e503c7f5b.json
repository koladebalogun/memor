{"ast":null,"code":"// A reducer is a function that accepts the state and action then based on the action type, it carries out a logic\n// This is where we recreate our actions\nexport default (function () {\n  let posts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"DELETE\":\n      return posts.filter(post => post._id !== action.payload);\n    // we're returning all the posts, but filtering out the one we deleted\n\n    case \"UPDATE\":\n    case \"LIKE\":\n      //this will do the same thing as UPDATE\n      return posts.map(post => post._id === action.payload._id ? action.payload : post);\n      {\n        /**action.payload is the updated post** so if  \n        the post id is equal to action.payload id, we want to return the action.payload. Because action.payload is the newly updated post. else we return the post as it was without any updates ***** */\n      }\n\n    case \"FETCH_ALL\":\n      //for fetching all post\n      return action.payload;\n\n    case \"CREATE\":\n      //for creating new posts\n      return [...posts, action.payload];\n    //the posts would be added to the action.payload\n\n    default:\n      return posts;\n  }\n});","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/reducers/posts.js"],"names":["posts","action","type","filter","post","_id","payload","map"],"mappings":"AAAA;AAEA;AACA,gBAAe,YAAwB;AAAA,MAAvBA,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,QAAL;AACE,aAAOF,KAAK,CAACG,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaJ,MAAM,CAACK,OAA3C,CAAP;AAA4D;;AAC9D,SAAK,QAAL;AACA,SAAK,MAAL;AAAa;AACX,aAAON,KAAK,CAACO,GAAN,CAAWH,IAAD,IACfA,IAAI,CAACC,GAAL,KAAaJ,MAAM,CAACK,OAAP,CAAeD,GAA5B,GAAkCJ,MAAM,CAACK,OAAzC,GAAmDF,IAD9C,CAAP;AAGA;AACE;AACR;AACO;;AAEH,SAAK,WAAL;AAAkB;AAChB,aAAOH,MAAM,CAACK,OAAd;;AACF,SAAK,QAAL;AAAe;AACb,aAAO,CAAC,GAAGN,KAAJ,EAAWC,MAAM,CAACK,OAAlB,CAAP;AAAmC;;AACrC;AACE,aAAON,KAAP;AAlBJ;AAoBD,CArBD","sourcesContent":["// A reducer is a function that accepts the state and action then based on the action type, it carries out a logic\n\n// This is where we recreate our actions\nexport default (posts = [], action) => {\n  switch (action.type) {\n    case \"DELETE\":\n      return posts.filter((post) => post._id !== action.payload ) // we're returning all the posts, but filtering out the one we deleted\n    case \"UPDATE\":\n    case \"LIKE\": //this will do the same thing as UPDATE\n      return posts.map((post) =>\n        post._id === action.payload._id ? action.payload : post\n      );\n      {\n        /**action.payload is the updated post** so if  \n        the post id is equal to action.payload id, we want to return the action.payload. Because action.payload is the newly updated post. else we return the post as it was without any updates ***** */\n      }\n\n    case \"FETCH_ALL\": //for fetching all post\n      return action.payload;\n    case \"CREATE\": //for creating new posts\n      return [...posts, action.payload]; //the posts would be added to the action.payload\n    default:\n      return posts;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}