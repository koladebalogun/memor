{"ast":null,"code":"import { FETCH_ALL, CREATE, UPDATE, DELETE } from '../constants/actionTypes';\nimport * as api from '../api'; //means we are importing everything from the api folder\n// Action Creators are functions that return actions and they have a type & payload\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchPosts();\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n}; //^^^^^^^\n\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchPostsBySearch(searchQuery);\n  } catch (error) {\n    console.log(error);\n  }\n}; //^^^^^\n\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post); // this is simply making an api request to the back end server\n\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}; // ****\n\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  // const user = JSON.parse(localStorage.getItem('profile'));  //***** */ \n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    }); //******* */\n  } catch (error) {\n    console.log(error);\n  }\n}; //From here, we move to the reducers to implement our actions","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/actions/posts.js"],"names":["FETCH_ALL","CREATE","UPDATE","DELETE","api","getPosts","dispatch","data","fetchPosts","type","payload","error","console","log","message","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","post","updatePost","id","deletePost","likePost"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,MAApC,QAAkD,0BAAlD;AACA,OAAO,KAAKC,GAAZ,MAAqB,QAArB,C,CAA8B;AAE9B;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC9C,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACI,UAAJ,EAAvB;AAEAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAET,SAAR;AAAmBU,MAAAA,OAAO,EAAEH;AAA5B,KAAD,CAAR;AACH,GAJD,CAIE,OAAOI,KAAP,EAAe;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACH;AACJ,CARM,C,CAUP;;AACA,OAAO,MAAMC,gBAAgB,GAAIC,WAAD,IAAiB,MAAOV,QAAP,IAAoB;AACjE,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACa,kBAAJ,CAAuBD,WAAvB,CAAvB;AACH,GAFD,CAEE,OAAOL,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AAEJ,CAPM,C,CAQP;;AAIA,OAAO,MAAMO,UAAU,GAAIC,IAAD,IAAU,MAAOb,QAAP,IAAoB;AACpD,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACc,UAAJ,CAAeC,IAAf,CAAvB,CADA,CAC6C;;AAE7Cb,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAER,MAAR;AAAgBS,MAAAA,OAAO,EAAEH;AAAzB,KAAD,CAAR;AACH,GAJD,CAIE,OAAOI,KAAP,EAAe;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CARM,C,CAUP;;AACA,OAAO,MAAMS,UAAU,GAAG,CAACC,EAAD,EAAKF,IAAL,KAAc,MAAOb,QAAP,IAAoB;AACxD,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACgB,UAAJ,CAAeC,EAAf,EAAmBF,IAAnB,CAAvB;AAEAb,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEP,MAAR;AAAgBQ,MAAAA,OAAO,EAAEH;AAAzB,KAAD,CAAR;AACH,GAJD,CAIE,OAAOI,KAAP,EAAe;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CARM;AAUP,OAAO,MAAMW,UAAU,GAAID,EAAD,IAAQ,MAAOf,QAAP,IAAoB;AAClD,MAAI;AACA,UAAMF,GAAG,CAACkB,UAAJ,CAAeD,EAAf,CAAN;AAEAf,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEN,MAAR;AAAgBO,MAAAA,OAAO,EAAEW;AAAzB,KAAD,CAAR;AACH,GAJD,CAIE,OAAOV,KAAP,EAAe;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CARM;AAUP,OAAO,MAAMY,QAAQ,GAAIF,EAAD,IAAQ,MAAOf,QAAP,IAAoB;AAChD;AACA,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACmB,QAAJ,CAAaF,EAAb,CAAvB;AAEAf,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEP,MAAR;AAAgBQ,MAAAA,OAAO,EAAEH;AAAzB,KAAD,CAAR,CAHA,CAG4C;AAC/C,GAJD,CAIE,OAAOI,KAAP,EAAe;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CATM,C,CAYP","sourcesContent":["import { FETCH_ALL, CREATE, UPDATE, DELETE } from '../constants/actionTypes';\nimport * as api from '../api' //means we are importing everything from the api folder\n\n// Action Creators are functions that return actions and they have a type & payload\nexport const getPosts = () => async (dispatch) => {\n    try {\n        const { data } = await api.fetchPosts();\n\n        dispatch({ type: FETCH_ALL, payload: data });\n    } catch (error ) {\n        console.log(error.message); \n    }\n}\n\n//^^^^^^^\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\n    try {\n        const { data } = await api.fetchPostsBySearch(searchQuery);\n    } catch (error) {\n        console.log(error)\n    }\n\n}\n//^^^^^\n\n\n\nexport const createPost = (post) => async (dispatch) => {\n    try {\n        const { data } = await api.createPost(post); // this is simply making an api request to the back end server\n\n        dispatch({ type: CREATE, payload: data  });\n    } catch (error ) {\n        console.log(error); \n    }\n}\n\n// ****\nexport const updatePost = (id, post) => async (dispatch) => {\n    try {\n        const { data } = await api.updatePost(id, post); \n\n        dispatch({ type: UPDATE, payload: data  });\n    } catch (error ) {\n        console.log(error ); \n    }\n}\n\nexport const deletePost = (id) => async (dispatch) => {\n    try {\n        await api.deletePost(id); \n\n        dispatch({ type: DELETE, payload: id  });\n    } catch (error ) {\n        console.log(error); \n    }\n}\n\nexport const likePost = (id) => async (dispatch) => {\n    // const user = JSON.parse(localStorage.getItem('profile'));  //***** */ \n    try {\n        const { data } = await api.likePost(id); \n\n        dispatch({ type: UPDATE, payload: data  }); //******* */\n    } catch (error ) {\n        console.log(error); \n    }\n}\n\n\n//From here, we move to the reducers to implement our actions"]},"metadata":{},"sourceType":"module"}