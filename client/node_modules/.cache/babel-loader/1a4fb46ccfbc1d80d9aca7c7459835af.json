{"ast":null,"code":"// This is where all the routes are initiated from the backend to the front end\nimport axios from'axios';var API=axios.create({baseURL:'https://memoiproject.herokuapp.com/'});// const url = 'http://localhost:5000/posts';\nAPI.interceptors.request.use(function(req){//this will send our token to the backend midddleware to verify that we are logged in\nif(localStorage.getItem('profile')){req.headers.Authorization=\"Bearer \".concat(JSON.parse(localStorage.getItem('profile')).token);// this will get our token \n}return req;});// export const fetchPosts = () => API.get('/posts'); //NORMAL GET REQUEST WITHOUT PAGES \nexport var fetchPost=function fetchPost(id){return API.get(\"/posts/\".concat(id));};////for fetching single post(post with more details)\nexport var fetchPosts=function fetchPosts(page){return API.get(\"/posts?page=\".concat(page));};//from here, we move to the backend(controllers) to modfy the data for the specific page\n//^^^^^^\nexport var fetchPostsBySearch=function fetchPostsBySearch(searchQuery){return API.get(\"/posts/search?searchQuery=\".concat(searchQuery.search||'none',\"&tags=\").concat(searchQuery.tags));};// Query parameters start with a ? and then you specify a variable name. if there is no search we want to show string of none. And in this searchquery, we'll also handle our tag search\n//^^^\nexport var createPost=function createPost(newPost){return API.post('/posts',newPost);};export var updatePost=function updatePost(id,updatedPost){return API.patch(\"/posts/\".concat(id),updatedPost);};export var deletePost=function deletePost(id){return API.delete(\"/posts/\".concat(id));};export var likePost=function likePost(id){return API.patch(\"/posts/\".concat(id,\"/likePost\"));};//For COMMENT\nexport var comment=function comment(value,id){return API.post(\"/posts/\".concat(id,\"/commentPost\"),{value:value});};export var signIn=function signIn(formData){return API.post('/user/signin',formData);};export var signUp=function signUp(formData){return API.post('/user/signup',formData);};//once we have the api requests here, we move on to Actions","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/src/api/index.js"],"names":["axios","API","create","baseURL","interceptors","request","use","req","localStorage","getItem","headers","Authorization","JSON","parse","token","fetchPost","id","get","fetchPosts","page","fetchPostsBySearch","searchQuery","search","tags","createPost","newPost","post","updatePost","updatedPost","patch","deletePost","delete","likePost","comment","value","signIn","formData","signUp"],"mappings":"AAAA;AACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,GAAMC,CAAAA,GAAG,CAAGD,KAAK,CAACE,MAAN,CAAa,CAAEC,OAAO,CAAE,qCAAX,CAAb,CAAZ,CAEA;AAEAF,GAAG,CAACG,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA6B,SAACC,GAAD,CAAS,CAAG;AACrC,GAAIC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAJ,CAAqC,CACjCF,GAAG,CAACG,OAAJ,CAAYC,aAAZ,kBAAsCC,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,EAA4CK,KAAlF,EAA2F;AAC9F,CAED,MAAOP,CAAAA,GAAP,CACH,CAND,EASA;AACA,MAAO,IAAMQ,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,EAAD,QAAQf,CAAAA,GAAG,CAACgB,GAAJ,kBAAkBD,EAAlB,EAAR,EAAlB,CAAmD;AAC1D,MAAO,IAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,IAAD,QAAUlB,CAAAA,GAAG,CAACgB,GAAJ,uBAAuBE,IAAvB,EAAV,EAAnB,CAA6D;AAEpE;AACA,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,WAAD,QAAiBpB,CAAAA,GAAG,CAACgB,GAAJ,qCAAqCI,WAAW,CAACC,MAAZ,EAAqB,MAA1D,kBAAyED,WAAW,CAACE,IAArF,EAAjB,EAA3B,CAA0I;AACjJ;AACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,OAAD,QAAaxB,CAAAA,GAAG,CAACyB,IAAJ,CAAS,QAAT,CAAmBD,OAAnB,CAAb,EAAnB,CACP,MAAO,IAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACX,EAAD,CAAKY,WAAL,QAAqB3B,CAAAA,GAAG,CAAC4B,KAAJ,kBAAoBb,EAApB,EAA0BY,WAA1B,CAArB,EAAnB,CACP,MAAO,IAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACd,EAAD,QAAQf,CAAAA,GAAG,CAAC8B,MAAJ,kBAAqBf,EAArB,EAAR,EAAnB,CACP,MAAO,IAAMgB,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAChB,EAAD,QAAQf,CAAAA,GAAG,CAAC4B,KAAJ,kBAAoBb,EAApB,cAAR,EAAjB,CAEP;AACA,MAAO,IAAMiB,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAQlB,EAAR,QAAef,CAAAA,GAAG,CAACyB,IAAJ,kBAAmBV,EAAnB,iBAAqC,CAACkB,KAAK,CAALA,KAAD,CAArC,CAAf,EAAhB,CAEP,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,QAAD,QAAcnC,CAAAA,GAAG,CAACyB,IAAJ,CAAS,cAAT,CAAyBU,QAAzB,CAAd,EAAf,CACP,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACD,QAAD,QAAcnC,CAAAA,GAAG,CAACyB,IAAJ,CAAS,cAAT,CAAyBU,QAAzB,CAAd,EAAf,CAGP","sourcesContent":["// This is where all the routes are initiated from the backend to the front end\nimport axios from 'axios';\n\nconst API = axios.create({ baseURL: 'https://memoiproject.herokuapp.com/' })\n\n// const url = 'http://localhost:5000/posts';\n\nAPI.interceptors.request.use((req) => {  //this will send our token to the backend midddleware to verify that we are logged in\n    if (localStorage.getItem('profile')) {\n        req.headers.Authorization = `Bearer ${JSON.parse(localStorage.getItem('profile')).token}`; // this will get our token \n    }\n\n    return req;\n})\n\n\n// export const fetchPosts = () => API.get('/posts'); //NORMAL GET REQUEST WITHOUT PAGES \nexport const fetchPost = (id) => API.get(`/posts/${id}`); ////for fetching single post(post with more details)\nexport const fetchPosts = (page) => API.get(`/posts?page=${page}`); //from here, we move to the backend(controllers) to modfy the data for the specific page\n\n//^^^^^^\nexport const fetchPostsBySearch = (searchQuery) => API.get(`/posts/search?searchQuery=${searchQuery.search ||'none'}&tags=${searchQuery.tags}`); // Query parameters start with a ? and then you specify a variable name. if there is no search we want to show string of none. And in this searchquery, we'll also handle our tag search\n//^^^\nexport const createPost = (newPost) => API.post('/posts', newPost);\nexport const updatePost = (id, updatedPost) => API.patch(`/posts/${id}`, updatedPost);\nexport const deletePost = (id) => API.delete(`/posts/${id}`);\nexport const likePost = (id) => API.patch(`/posts/${id}/likePost`);\n\n//For COMMENT\nexport const comment = (value, id) => API.post(`/posts/${id}/commentPost`, {value});\n\nexport const signIn = (formData) => API.post('/user/signin', formData);\nexport const signUp = (formData) => API.post('/user/signup', formData);\n\n\n//once we have the api requests here, we move on to Actions"]},"metadata":{},"sourceType":"module"}