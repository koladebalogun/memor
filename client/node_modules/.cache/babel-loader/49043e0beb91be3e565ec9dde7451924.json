{"ast":null,"code":"var _jsxFileName = \"/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Auth/Auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Avatar, Typography, Button, Paper, Grid, Container, TextField } from \"@material-ui/core\";\nimport { GoogleLogin } from \"react-google-login\"; //This import is for the google o-authentication (openAuthorization)\n\nimport Icon from './icon';\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport useStyles from \"./styles\";\nimport Input from \"./Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Auth = () => {\n  _s();\n\n  const classes = useStyles();\n  const [isSignup, setIsSignup] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleShowPassword = () => setShowPassword(prevShowPassword => !prevShowPassword); // it's a function that will toggle the state/ visibility of the password so that when clicked\n\n\n  const handleSubmit = () => {};\n\n  const handleChange = () => {};\n\n  const switchMode = () => {\n    // This function, we'll switch the mode from the signUp to signIn\n    setIsSignup(prevIsSignup => !prevIsSignup);\n    handleShowPassword(false); // This would reset the value of the password to false when the switchmode is toggled\n  };\n\n  const googleSuccess = () => {};\n\n  const googleFailure = () => {\n    console.log('Google Sign In was un');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.paper,\n      elevation: 3,\n      children: [/*#__PURE__*/_jsxDEV(Avatar, {\n        className: classes.avatar,\n        children: /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        children: isSignup ? \"Sign Up\" : \"Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.form,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          children: [isSignup && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Input, {\n              name: \"firstName\",\n              label: \"First Name\",\n              autoFocus: true,\n              half: true,\n              handleChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              name: \"lastName\",\n              label: \"Last Name\",\n              half: true,\n              handleChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"email\",\n            label: \"Email Address\",\n            type: \"email\",\n            handleChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            name: \"password\",\n            label: \"Password\",\n            type: showPassword ? \"text\" : \"password\",\n            handleChange: handleChange,\n            handleShowPassword: handleShowPassword\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), isSignup && /*#__PURE__*/_jsxDEV(Input, {\n            name: \"confirmPassword\",\n            label: \"Repeat Password\",\n            handleChange: handleChange,\n            type: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n          clientId: \"GOOGLE ID\",\n          render: renderProps =>\n          /*#__PURE__*/\n          //render means how our button should look like\n          _jsxDEV(Button, {\n            className: classes.googleButton,\n            color: \"primary\",\n            fullWidth: true,\n            onClick: renderProps.onClick,\n            disabled: renderProps.disabled,\n            startIcon: /*#__PURE__*/_jsxDEV(Icon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 28\n            }, this),\n            variant: \"contained\",\n            children: \"Google Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this),\n          onSuccess: googleSuccess,\n          onFailure: googleFailure,\n          cookiePolicy: \"single_host_origin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          fullWidth: true,\n          variant: \"contained\",\n          color: \"primary\",\n          className: classes.submit,\n          children: isSignup ? \"Sign Up\" : \"Sign In \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justifyContent: \"flex-end\",\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: switchMode,\n              children: isSignup ? \"Already have an account? Sign In\" : \"Don't have an account? Sign Up \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Auth, \"thvx19+oPNv8Mr7p6X+onHckTcM=\", false, function () {\n  return [useStyles];\n});\n\n_c = Auth;\nexport default Auth; // here we created one variable (isSignUp) and based on the change of this variable we'll be able to render divs based on condition of the variable\n\nvar _c;\n\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Auth/Auth.js"],"names":["React","useState","Avatar","Typography","Button","Paper","Grid","Container","TextField","GoogleLogin","Icon","LockOutlinedIcon","useStyles","Input","Auth","classes","isSignup","setIsSignup","showPassword","setShowPassword","handleShowPassword","prevShowPassword","handleSubmit","handleChange","switchMode","prevIsSignup","googleSuccess","googleFailure","console","log","paper","avatar","form","renderProps","googleButton","onClick","disabled","submit"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Avatar, Typography, Button, Paper, Grid, Container, TextField } from \"@material-ui/core\";\n\nimport { GoogleLogin } from \"react-google-login\"; //This import is for the google o-authentication (openAuthorization)\n\nimport Icon from './icon';\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\n\nimport useStyles from \"./styles\";\nimport Input from \"./Input\";\n\nconst Auth = () => {\n  const classes = useStyles();\n\n  const [isSignup, setIsSignup] = useState(false);\n\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleShowPassword = () =>\n    setShowPassword((prevShowPassword) => !prevShowPassword); // it's a function that will toggle the state/ visibility of the password so that when clicked\n\n  const handleSubmit = () => {};\n\n  const handleChange = () => {};\n\n  const switchMode = () => {\n    // This function, we'll switch the mode from the signUp to signIn\n    setIsSignup((prevIsSignup) => !prevIsSignup);\n    handleShowPassword(false); // This would reset the value of the password to false when the switchmode is toggled\n  };\n\n  const googleSuccess = () => {\n\n  };\n\n  const googleFailure = () => {\n    console.log('Google Sign In was un')\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <Paper className={classes.paper} elevation={3}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography variant=\"h5\">{isSignup ? \"Sign Up\" : \"Sign In\"}</Typography>\n        <form className={classes.form} onSubmit={handleSubmit}>\n          <Grid container spacing={2}>\n            {isSignup && (\n              <>\n                <Input\n                  name=\"firstName\"\n                  label=\"First Name\"\n                  autoFocus\n                  half\n                  handleChange={handleChange}\n                />\n                <Input\n                  name=\"lastName\"\n                  label=\"Last Name\"\n                  half\n                  handleChange={handleChange}\n                />\n              </>\n            )}\n            <Input\n              name=\"email\"\n              label=\"Email Address\"\n              type=\"email\"\n              handleChange={handleChange}\n            />\n            <Input\n              name=\"password\"\n              label=\"Password\"\n              type={showPassword ? \"text\" : \"password\"}\n              handleChange={handleChange}\n              handleShowPassword={handleShowPassword}\n            />\n\n            {/** password confirmation field that would only show if we are on the signup form */}\n            {isSignup && (\n              <Input\n                name=\"confirmPassword\"\n                label=\"Repeat Password\"\n                handleChange={handleChange}\n                type=\"password\"\n              />\n            )}\n          </Grid>\n\n          {/* GOOGLE-LOGIN-AUTHENTICATION */}\n\n          <GoogleLogin\n            clientId=\"GOOGLE ID\"\n            render={( renderProps  ) => ( //render means how our button should look like\n              <Button\n                className={classes.googleButton}\n                color=\"primary\"\n                fullWidth\n                onClick={renderProps.onClick}\n                disabled={renderProps.disabled}\n                startIcon={<Icon />}\n                variant=\"contained\"\n              > \n              Google Sign In \n              </Button>\n            )}\n            onSuccess={googleSuccess}\n            onFailure={googleFailure}\n            cookiePolicy=\"single_host_origin\"\n          />\n\n          {/* *** */}\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            {isSignup ? \"Sign Up\" : \"Sign In \"}\n          </Button>\n\n          {/* creating a button that will allow us switch from SignUp to Sign in */}\n          <Grid container justifyContent=\"flex-end\">\n            <Grid item>\n              <Button onClick={switchMode}>\n                {isSignup\n                  ? \"Already have an account? Sign In\"\n                  : \"Don't have an account? Sign Up \"}\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default Auth;\n\n// here we created one variable (isSignUp) and based on the change of this variable we'll be able to render divs based on condition of the variable\n"]},"metadata":{},"sourceType":"module"}