{"ast":null,"code":"import _regeneratorRuntime from\"/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{Avatar,Typography,Button,Paper,Grid,Container}from\"@material-ui/core\";import{useNavigate}from\"react-router\";import{GoogleLogin}from\"react-google-login\";//This import is for the google o-authentication (openAuthorization)\nimport{useDispatch}from'react-redux';import Icon from'./icon';import LockOutlinedIcon from\"@material-ui/icons/LockOutlined\";import useStyles from\"./styles\";import Input from\"./Input\";import{signin,signup}from'../../actions/auth';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var initialState={//this is the initial state value for our formData, this will hold the users details\nfirstName:'',lastName:'',email:'',password:'',confirmPassword:''};var Auth=function Auth(){var classes=useStyles();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isSignup=_useState2[0],setIsSignup=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),showPassword=_useState4[0],setShowPassword=_useState4[1];var _useState5=useState(initialState),_useState6=_slicedToArray(_useState5,2),formData=_useState6[0],setFormData=_useState6[1];//This state is for the user form input\nvar dispatch=useDispatch();var navigate=useNavigate();var handleShowPassword=function handleShowPassword(){setShowPassword(function(prevShowPassword){return!prevShowPassword;});// it's a function that will toggle the state/ visibility of the password so that when clicked\n};var handleSubmit=function handleSubmit(e){e.preventDefault();console.log(formData);//on submit, we want to have have logic to either sign up or sign in the user\nif(isSignup){dispatch(signup(formData,navigate));//we are passing the formDate so we can have it in our data base, and using navigate to navigate when something happens\n}else{dispatch(signin(formData,navigate));}};// to populate the initial state field, we'll use the handleChange function because each one of our inputs have that function\nvar handleChange=function handleChange(e){e.preventDefault();setFormData(_objectSpread(_objectSpread({},formData),{},_defineProperty({},e.target.name,e.target.value)));};var switchMode=function switchMode(){setIsSignup(function(prevIsSignup){return!prevIsSignup;});setShowPassword(false);};var googleSuccess=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(res){var result,token;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:result=res===null||res===void 0?void 0:res.profileObj;token=res===null||res===void 0?void 0:res.tokenId;try{dispatch({type:'AUTH',data:{result:result,token:token}});navigate('/');//Once we dispatch the data/ user log's in, we want it to automatically redirect to the homepage.\n}catch(error){console.log(error);}case 3:case\"end\":return _context.stop();}}},_callee);}));return function googleSuccess(_x){return _ref.apply(this,arguments);};}();var googleFailure=function googleFailure(error){console.log(error);console.log('Google Sign In was unsuccessful, Try again');};return/*#__PURE__*/_jsx(Container,{component:\"main\",maxWidth:\"xs\",children:/*#__PURE__*/_jsxs(Paper,{className:classes.paper,elevation:3,children:[/*#__PURE__*/_jsx(Avatar,{className:classes.avatar,children:/*#__PURE__*/_jsx(LockOutlinedIcon,{})}),/*#__PURE__*/_jsx(Typography,{variant:\"h5\",children:isSignup?\"Sign Up\":\"Sign In\"}),/*#__PURE__*/_jsxs(\"form\",{className:classes.form,onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(Grid,{container:true,spacing:2,children:[isSignup&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Input,{name:\"firstName\",label:\"First Name\",autoFocus:true,half:true,handleChange:handleChange}),/*#__PURE__*/_jsx(Input,{name:\"lastName\",label:\"Last Name\",half:true,handleChange:handleChange})]}),/*#__PURE__*/_jsx(Input,{name:\"email\",label:\"Email Address\",type:\"email\",handleChange:handleChange}),/*#__PURE__*/_jsx(Input,{name:\"password\",label:\"Password\",type:showPassword?\"text\":\"password\",handleChange:handleChange,handleShowPassword:handleShowPassword}),isSignup&&/*#__PURE__*/_jsx(Input,{name:\"confirmPassword\",label:\"Repeat Password\",handleChange:handleChange,type:\"password\"})]}),/*#__PURE__*/_jsx(Button,{type:\"submit\",fullWidth:true,variant:\"contained\",color:\"primary\",className:classes.submit,children:isSignup?\"Sign Up\":\"Sign In \"}),/*#__PURE__*/_jsx(GoogleLogin,{clientId:\"993419251326-st6e1dfmh7siqkuc0r6rfrc6ql31of2r.apps.googleusercontent.com\",render:function render(renderProps){return/*#__PURE__*/ (//render means how our button should look like\n_jsx(Button,{className:classes.googleButton,color:\"primary\",fullWidth:true,onClick:renderProps.onClick,disabled:renderProps.disabled,startIcon:/*#__PURE__*/_jsx(Icon,{}),variant:\"contained\",children:\"Google Sign In\"}));},onSuccess:googleSuccess,onFailure:googleFailure,cookiePolicy:\"single_host_origin\"}),/*#__PURE__*/_jsx(Grid,{container:true,justifyContent:\"flex-end\",children:/*#__PURE__*/_jsx(Grid,{item:true,children:/*#__PURE__*/_jsx(Button,{onClick:switchMode,children:isSignup?\"Already have an account? Sign In\":\"Don't have an account? Sign Up \"})})})]})]})});};export default Auth;// here we created one variable (isSignUp) and based on the change of this variable we'll be able to render divs based on condition of the variable","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/src/components/Auth/Auth.js"],"names":["React","useState","Avatar","Typography","Button","Paper","Grid","Container","useNavigate","GoogleLogin","useDispatch","Icon","LockOutlinedIcon","useStyles","Input","signin","signup","initialState","firstName","lastName","email","password","confirmPassword","Auth","classes","isSignup","setIsSignup","showPassword","setShowPassword","formData","setFormData","dispatch","navigate","handleShowPassword","prevShowPassword","handleSubmit","e","preventDefault","console","log","handleChange","target","name","value","switchMode","prevIsSignup","googleSuccess","res","result","profileObj","token","tokenId","type","data","error","googleFailure","paper","avatar","form","submit","renderProps","googleButton","onClick","disabled"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Avatar, Typography, Button, Paper, Grid, Container } from \"@material-ui/core\";\nimport { useNavigate } from \"react-router\";\n\nimport { GoogleLogin } from \"react-google-login\"; //This import is for the google o-authentication (openAuthorization)\nimport { useDispatch } from 'react-redux'\n\nimport Icon from './icon';\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport useStyles from \"./styles\";\nimport Input from \"./Input\";\nimport { signin, signup } from '../../actions/auth';\n\n\nconst initialState = { //this is the initial state value for our formData, this will hold the users details\n  firstName: '',\n  lastName: '',\n  email: '',\n  password: '',\n  confirmPassword: ''\n}\n\nconst Auth = () => {\n  const classes = useStyles();\n  const [isSignup, setIsSignup] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData ] = useState(initialState); //This state is for the user form input\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n\n  \n  const handleShowPassword = () => {\n    setShowPassword((prevShowPassword) => !prevShowPassword); // it's a function that will toggle the state/ visibility of the password so that when clicked\n  };\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    console.log(formData);\n\n    //on submit, we want to have have logic to either sign up or sign in the user\n\n    if (isSignup) {\n      dispatch(signup(formData, navigate )); //we are passing the formDate so we can have it in our data base, and using navigate to navigate when something happens\n    } else {\n      dispatch(signin(formData, navigate ));\n    }\n  };\n\n  // to populate the initial state field, we'll use the handleChange function because each one of our inputs have that function\n\n\n  const handleChange = (e) => {\n    e.preventDefault();\n\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n\n\n  const switchMode = () => {\n    setIsSignup((prevIsSignup) => !prevIsSignup);\n    setShowPassword(false); \n  };\n\n\n\n  const googleSuccess = async (res) => { \n    const result = res?.profileObj; \n    \n    const token = res?.tokenId;    \n\n    try {\n        dispatch({ type: 'AUTH', data: { result, token }});\n\n        navigate('/'); //Once we dispatch the data/ user log's in, we want it to automatically redirect to the homepage.\n    } catch (error) {\n        console.log(error);\n    }\n  };\n\n\n\n  const googleFailure = (error) => {\n      console.log(error)\n    console.log('Google Sign In was unsuccessful, Try again')\n  };\n\n\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <Paper className={classes.paper} elevation={3}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography variant=\"h5\">{isSignup ? \"Sign Up\" : \"Sign In\"}</Typography>\n        <form className={classes.form} onSubmit={handleSubmit}>\n          <Grid container spacing={2}>\n            {isSignup && (\n              <>\n                <Input\n                  name=\"firstName\"\n                  label=\"First Name\"\n                  autoFocus\n                  half\n                  handleChange={handleChange}\n                />\n                <Input\n                  name=\"lastName\"\n                  label=\"Last Name\"\n                  half\n                  handleChange={handleChange}\n                />\n              </>\n            )}\n            <Input\n              name=\"email\"\n              label=\"Email Address\"\n              type=\"email\"\n              handleChange={handleChange}\n            />\n            <Input\n              name=\"password\"\n              label=\"Password\"\n              type={showPassword ? \"text\" : \"password\"}\n              handleChange={handleChange}\n              handleShowPassword={handleShowPassword}\n            />\n\n            {/** password confirmation field that would only show if we are on the signup form */}\n            {isSignup && (\n              <Input\n                name=\"confirmPassword\"\n                label=\"Repeat Password\"\n                handleChange={handleChange}\n                type=\"password\"\n              />\n            )}\n          </Grid>\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            {isSignup ? \"Sign Up\" : \"Sign In \"}\n          </Button>\n\n          {/* GOOGLE-LOGIN-AUTHENTICATION */}\n\n          <GoogleLogin\n            clientId=\"993419251326-st6e1dfmh7siqkuc0r6rfrc6ql31of2r.apps.googleusercontent.com\"\n            render={( renderProps  ) => ( //render means how our button should look like\n              <Button\n                className={classes.googleButton}\n                color=\"primary\"\n                fullWidth\n                onClick={renderProps.onClick}\n                disabled={renderProps.disabled}\n                startIcon={<Icon />}\n                variant=\"contained\"\n              > \n              Google Sign In \n              </Button>\n            )}\n            onSuccess={googleSuccess}\n            onFailure={googleFailure}\n            cookiePolicy=\"single_host_origin\"\n          />\n\n          {/* *** */}\n\n\n          {/* creating a button that will allow us switch from SignUp to Sign in */}\n          <Grid container justifyContent=\"flex-end\">\n            <Grid item>\n              <Button onClick={switchMode}>\n                {isSignup\n                  ? \"Already have an account? Sign In\"\n                  : \"Don't have an account? Sign Up \"}\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default Auth;\n\n// here we created one variable (isSignUp) and based on the change of this variable we'll be able to render divs based on condition of the variable\n"]},"metadata":{},"sourceType":"module"}