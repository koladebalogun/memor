{"ast":null,"code":"var _jsxFileName = \"/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Posts/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Grid, CircularProgress } from \"@material-ui/core\"; // ***\n\nimport Post from \"./Post/Post\";\nimport { useSelector } from \"react-redux\";\nimport useStyles from \"./styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Posts = _ref => {\n  _s();\n\n  let {\n    setCurrentId\n  } = _ref;\n  const posts = useSelector(state => currentId ? state.posts.find(p => p._id === currentId) : null); // if we have a current id, we want to loop over state.post\n\n  const classes = useStyles();\n  console.log(posts);\n  return !posts.length ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 21\n  }, this) :\n  /*#__PURE__*/\n  //if there's no post.length, show circular progress (loading) else show content\n  _jsxDEV(Grid, {\n    className: classes.container,\n    container: true,\n    alignItems: \"stretch\",\n    spacing: 3,\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      children: [/*#__PURE__*/_jsxDEV(Post, {\n        post: post,\n        setCurrentId: setCurrentId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 15\n      }, this), \" \"]\n    }, post._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Posts, \"C/BxEwR0KgzJ2Knmlc9v0LYcdx8=\", false, function () {\n  return [useSelector, useStyles];\n});\n\n_c = Posts;\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Posts/Posts.js"],"names":["React","Grid","CircularProgress","Post","useSelector","useStyles","Posts","setCurrentId","posts","state","currentId","find","p","_id","classes","console","log","length","container","map","post"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,gBAAf,QAAuC,mBAAvC,C,CAA4D;;AAC5D,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,SAAP,MAAsB,UAAtB;;;AAEA,MAAMC,KAAK,GAAG,QAAoB;AAAA;;AAAA,MAAnB;AAACC,IAAAA;AAAD,GAAmB;AAChC,QAAMC,KAAK,GAAGJ,WAAW,CAAEK,KAAD,IAAWC,SAAS,GAAGD,KAAK,CAACD,KAAN,CAAYG,IAAZ,CAAkBC,CAAD,IAAOA,CAAC,CAACC,GAAF,KAAUH,SAAlC,CAAH,GAAkD,IAAvE,CAAzB,CADgC,CACuE;;AACvG,QAAMI,OAAO,GAAGT,SAAS,EAAzB;AAEAU,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACA,SACE,CAACA,KAAK,CAACS,MAAP,gBAAgB,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,UAAhB;AAAA;AAAyC;AACvC,UAAC,IAAD;AAAM,IAAA,SAAS,EAAEH,OAAO,CAACI,SAAzB;AAAoC,IAAA,SAAS,MAA7C;AAA8C,IAAA,UAAU,EAAC,SAAzD;AAAmE,IAAA,OAAO,EAAE,CAA5E;AAAA,cACGV,KAAK,CAACW,GAAN,CAAWC,IAAD,iBACT,QAAC,IAAD;AAAqB,MAAA,IAAI,MAAzB;AAA0B,MAAA,EAAE,EAAE,EAA9B;AAAkC,MAAA,EAAE,EAAE,CAAtC;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,IAAZ;AAAkB,QAAA,YAAY,EAAEb;AAAhC;AAAA;AAAA;AAAA;AAAA,cADJ;AAAA,OAAWa,IAAI,CAACP,GAAhB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UAFJ;AAaD,CAlBD;;GAAMP,K;UACUF,W,EACEC,S;;;KAFZC,K;AAoBN,eAAeA,KAAf","sourcesContent":["import React from \"react\";\nimport { Grid, CircularProgress } from \"@material-ui/core\"; // ***\nimport Post from \"./Post/Post\";\nimport { useSelector } from \"react-redux\";\n\nimport useStyles from \"./styles\";\n\nconst Posts = ({setCurrentId}) => {\n  const posts = useSelector((state) => currentId ? state.posts.find((p) => p._id === currentId) : null ) // if we have a current id, we want to loop over state.post\n  const classes = useStyles();\n\n  console.log(posts)\n  return (\n    !posts.length ? <CircularProgress/> : (  //if there's no post.length, show circular progress (loading) else show content\n      <Grid className={classes.container} container alignItems=\"stretch\" spacing={3}>\n        {posts.map((post) => (\n          <Grid key={post._id} item xs={12} sm={6}>\n              <Post post={post} setCurrentId={setCurrentId} /> {/* we'll pass the (setCurrentId) one level deeper into the post component. this is called props drilling */}\n          </Grid>\n        ))\n          \n        }\n      </Grid>\n    )\n  );\n};\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}