{"ast":null,"code":"var _jsxFileName = \"/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Pagination.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { Pagination, PaginationItem } from '@material-ui/lab';\nimport useStyles from './styles';\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from 'react-redux'; // allows us to dispatch redux actions\n\nimport { getPosts } from '../actions/posts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Paginate = _ref => {\n  _s();\n\n  let {\n    page\n  } = _ref;\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const {\n    numberOfPages\n  } = useSelector(state => state.posts);\n  useEffect(() => {\n    if (page) dispatch(getPosts(page));\n  }, [page]); //in this hook, we want to fetch the post anytime the page changes,\n\n  return /*#__PURE__*/_jsxDEV(Pagination, {\n    classes: {\n      ul: classes.ul\n    },\n    count: numberOfPages //this is static but we'll have to fetch the number of count depending on the number of pages we have.\n    ,\n    page: Num //This will be dynamic later on\n    ,\n    variant: \"outlined\",\n    color: \"primary\",\n    renderItem: item => /*#__PURE__*/_jsxDEV(PaginationItem, { ...item,\n      component: Link,\n      to: `/posts?page=${1}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Paginate, \"IAeqBpR9F7opgt+mGPSPKPhdcFQ=\", false, function () {\n  return [useStyles, useDispatch, useSelector];\n});\n\n_c = Paginate;\nexport default Paginate; // Our current static pagination is now done, we'll import it inside the home component\n\nvar _c;\n\n$RefreshReg$(_c, \"Paginate\");","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Pagination.jsx"],"names":["React","useEffect","Pagination","PaginationItem","useStyles","Link","useDispatch","useSelector","getPosts","Paginate","page","classes","dispatch","numberOfPages","state","posts","ul","Num","item"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,kBAA3C;AACA,OAAOC,SAAP,MAAsB,UAAtB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CAAwD;;AAExD,SAASC,QAAT,QAAyB,kBAAzB;;;AAEA,MAAMC,QAAQ,GAAG,QAAY;AAAA;;AAAA,MAAX;AAACC,IAAAA;AAAD,GAAW;AACzB,QAAMC,OAAO,GAAGP,SAAS,EAAzB;AACA,QAAMQ,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAoBN,WAAW,CAAEO,KAAD,IAAWA,KAAK,CAACC,KAAlB,CAArC;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGS,IAAH,EAASE,QAAQ,CAACJ,QAAQ,CAACE,IAAD,CAAT,CAAR;AACZ,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT,CALyB,CAOb;;AAEZ,sBACI,QAAC,UAAD;AACI,IAAA,OAAO,EAAE;AAAEM,MAAAA,EAAE,EAAEL,OAAO,CAACK;AAAd,KADb;AAEI,IAAA,KAAK,EAAEH,aAFX,CAE0B;AAF1B;AAGI,IAAA,IAAI,EAAEI,GAHV,CAGe;AAHf;AAII,IAAA,OAAO,EAAC,UAJZ;AAKI,IAAA,KAAK,EAAC,SALV;AAMI,IAAA,UAAU,EAAIC,IAAD,iBACT,QAAC,cAAD,OAAoBA,IAApB;AAA0B,MAAA,SAAS,EAAEb,IAArC;AAA2C,MAAA,EAAE,EAAG,eAAc,CAAE;AAAhE;AAAA;AAAA;AAAA;AAAA;AAPR;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CArBD;;GAAMI,Q;UACcL,S,EACCE,W,EACSC,W;;;KAHxBE,Q;AAuBN,eAAeA,QAAf,C,CAEA","sourcesContent":["import React, {useEffect} from \"react\";\nimport { Pagination, PaginationItem } from '@material-ui/lab';\nimport useStyles from './styles'; \nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from 'react-redux'; // allows us to dispatch redux actions\n\nimport { getPosts } from '../actions/posts'\n\nconst Paginate = ({page}) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const { numberOfPages } = useSelector((state) => state.posts )\n    \n    useEffect(() => {\n        if(page) dispatch(getPosts(page));\n    }, [page]); //in this hook, we want to fetch the post anytime the page changes,\n    \n    return ( \n        <Pagination\n            classes={{ ul: classes.ul}}\n            count={numberOfPages} //this is static but we'll have to fetch the number of count depending on the number of pages we have.\n            page={Num} //This will be dynamic later on\n            variant=\"outlined\"\n            color=\"primary\"\n            renderItem ={(item) => (\n                <PaginationItem {...item} component={Link} to={`/posts?page=${1}`}/>\n            )}\n        />\n     );\n}\n \nexport default Paginate;\n\n// Our current static pagination is now done, we'll import it inside the home component"]},"metadata":{},"sourceType":"module"}