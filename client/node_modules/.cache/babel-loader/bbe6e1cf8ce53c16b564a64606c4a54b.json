{"ast":null,"code":"var _jsxFileName = \"/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Home/Home.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Grow, Grid, Paper, AppBar, TextField, Button } from \"@material-ui/core\";\nimport { useDispatch } from 'react-redux'; // allows us to dispatch redux actions\n\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport ChipInput from 'material-ui-chip-input';\nimport { getPosts, getPostsBySearch } from '../../actions/posts'; //^^^^^\n\nimport Pagination from '../Pagination'; //^^\n\nimport useStyles from '../../styles';\nimport Posts from \"../Posts/Posts\";\nimport Form from \"../Form/Form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useQuery() {\n  _s();\n\n  //setting up our url search param.this will help identify the page we currently and the search terms we are looking for\n  return new URLSearchParams(useLocation().search);\n}\n\n_s(useQuery, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n  return [useLocation];\n});\n\nconst Home = () => {\n  _s2();\n\n  const [currentId, setCurrentId] = useState(null); //**  it's null at the start because we don't have the id selected */\n\n  const classes = useStyles();\n  const dispatch = useDispatch(); //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n  const query = useQuery(); // this will let us use it as a hook.\n\n  const navigate = useNavigate();\n  const page = query.get('page') || 1; // getting our page info. This will read the url and see if we have a page parameter in there if so, it will populate this variable and if we don't have the page we'll be on the first one\n\n  const searchQuery = query.get('searchQuery');\n  const [search, setSearch] = useState(''); // setting a state for our search fields\n\n  const [tags, setTags] = useState([]); // state for tag search\n  //^^^^^^^^^^\n  //********************************* */\n  // useEffect(() => {\n  //   dispatch(getPosts());\n  // }, [currentId, dispatch]); //adding currentId as a dependency would mean we don't have to refresh everytime we make changes\n  //********************************* */\n  //^^^^^^^^^^^^^^^^^\n\n  const searchPost = () => {\n    if (search.trim() || tags) {\n      //dispatch -> fetch search post\n      dispatch(getPostsBySearch({\n        search,\n        tags: tags.join(',')\n      })); //This action is taking the search query object that we specified, and we also provide tags which we have to render into a string that way it will be easier to pass data from the front to backend. because we cannot pass an array through the url parameters\n\n      navigate(`/posts/search?searchQuery=${search || 'none'}&tags=${tags.join(',')}`);\n    } else {\n      navigate('/');\n    }\n  };\n\n  const handleKeyPress = e => {\n    if (e.keyCode === 13) {\n      searchPost(); //This would enable us use the enter key submit a search\n    }\n  };\n\n  const handleAdd = tag => {\n    setTags([...tags, tag]);\n  };\n\n  const handleDelete = tagToDelete => {\n    setTags(tags.filter(tag => tag !== tagToDelete));\n  }; //^^^^^^^\n\n\n  return /*#__PURE__*/_jsxDEV(Grow, {\n    in: true,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"xl\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        className: classes.gridContainer,\n        justifyContent: \"space-between\",\n        alignItems: \"stretch\",\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 9,\n          children: [/*#__PURE__*/_jsxDEV(Posts, {\n            setCurrentId: setCurrentId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 3,\n          children: [/*#__PURE__*/_jsxDEV(AppBar, {\n            className: classes.appBarSearch,\n            position: \"static\",\n            color: \"inherit\",\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              name: \"search\",\n              variant: \"outlined\",\n              label: \"Search Memories\",\n              fullWidth: true,\n              onKeyPress: handleKeyPress,\n              value: search,\n              onChange: e => setSearch(e.target.value) // This will enable us change the value of the search\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ChipInput, {\n              style: {\n                margin: '10px 0'\n              },\n              value: tags //This value has to be dynamic, it has to be from state\n              ,\n              onAdd: handleAdd,\n              onDelete: handleDelete,\n              label: \"Search Tags\",\n              variant: \"outlined\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n              onClick: searchPost,\n              className: classes.searchButton,\n              variant: \"contained\",\n              color: \"primary\",\n              children: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            currentId: currentId,\n            setCurrentId: setCurrentId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(Paper, {\n            className: classes.pagination,\n            elevation: 6,\n            children: /*#__PURE__*/_jsxDEV(Pagination, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Home, \"N7B3QMMXmi4Tqy2L2DVPVwZ7SWc=\", false, function () {\n  return [useStyles, useDispatch, useQuery, useNavigate];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Home/Home.js"],"names":["React","useEffect","useState","Container","Grow","Grid","Paper","AppBar","TextField","Button","useDispatch","useNavigate","useLocation","ChipInput","getPosts","getPostsBySearch","Pagination","useStyles","Posts","Form","useQuery","URLSearchParams","search","Home","currentId","setCurrentId","classes","dispatch","query","navigate","page","get","searchQuery","setSearch","tags","setTags","searchPost","trim","join","handleKeyPress","e","keyCode","handleAdd","tag","handleDelete","tagToDelete","filter","gridContainer","appBarSearch","target","value","margin","searchButton","pagination"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Container, Grow, Grid, Paper, AppBar, TextField, Button } from \"@material-ui/core\";\nimport { useDispatch } from 'react-redux'; // allows us to dispatch redux actions\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport ChipInput from 'material-ui-chip-input'\n\nimport { getPosts, getPostsBySearch } from '../../actions/posts'; //^^^^^\nimport Pagination from '../Pagination' //^^\nimport useStyles from '../../styles';\nimport Posts from \"../Posts/Posts\";\nimport Form from \"../Form/Form\";\n\nfunction useQuery() { //setting up our url search param.this will help identify the page we currently and the search terms we are looking for\n  return new URLSearchParams(useLocation().search);\n}\n\nconst Home = () => {\n  const [currentId, setCurrentId] = useState(null); //**  it's null at the start because we don't have the id selected */\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  const query = useQuery(); // this will let us use it as a hook.\n  const navigate  = useNavigate();\n  const page = query.get('page') || 1; // getting our page info. This will read the url and see if we have a page parameter in there if so, it will populate this variable and if we don't have the page we'll be on the first one\n\n  const searchQuery = query.get('searchQuery')\n  const [ search, setSearch ] = useState(''); // setting a state for our search fields\n  const [ tags, setTags ] = useState([]); // state for tag search\n  //^^^^^^^^^^\n\n\n  //********************************* */\n\n  // useEffect(() => {\n  //   dispatch(getPosts());\n  // }, [currentId, dispatch]); //adding currentId as a dependency would mean we don't have to refresh everytime we make changes\n\n  //********************************* */\n\n\n  //^^^^^^^^^^^^^^^^^\n  const searchPost = () => {\n\n    if(search.trim() || tags) {\n      //dispatch -> fetch search post\n      dispatch(getPostsBySearch({ search, tags: tags.join(',')})); //This action is taking the search query object that we specified, and we also provide tags which we have to render into a string that way it will be easier to pass data from the front to backend. because we cannot pass an array through the url parameters\n      navigate(`/posts/search?searchQuery=${search || 'none'}&tags=${tags.join(',')}`)\n    }else{\n      navigate('/');\n    }\n  }\n\n  const handleKeyPress = (e) => {\n    if(e.keyCode === 13 ) {\n      searchPost();\n      //This would enable us use the enter key submit a search\n    }\n  }\n\n  const handleAdd = (tag) => {\n    setTags([ ...tags, tag]); \n  }\n\n  const handleDelete = (tagToDelete) => {\n    setTags(tags.filter((tag) => tag !== tagToDelete));\n  };\n\n  //^^^^^^^\n  return (\n    <Grow in>\n      <Container maxWidth=\"xl\">\n        <Grid container className={classes.gridContainer} justifyContent=\"space-between\" alignItems=\"stretch\" spacing={3} >\n          <Grid item xs={12} sm={6} md={9}>\n            <Posts setCurrentId={setCurrentId} />{\" \"}\n            {/* passing the setter method (Methods which update a variable) which is the (setCurrentId) as props into the Posts component */}\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <AppBar className={classes.appBarSearch} position=\"static\" color=\"inherit\">\n              <TextField\n                name=\"search\"\n                variant=\"outlined\"\n                label=\"Search Memories\"\n                fullWidth\n                onKeyPress={handleKeyPress}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)} // This will enable us change the value of the search\n              />\n              <ChipInput\n                style={{ margin: '10px 0'}}\n                value={tags} //This value has to be dynamic, it has to be from state\n                onAdd={handleAdd}\n                onDelete={handleDelete}\n                label=\"Search Tags\"\n                variant=\"outlined\"\n              /> {/*^^ For searching by tags */}\n              <Button onClick={searchPost} className={classes.searchButton} variant='contained' color=\"primary\">Search</Button>\n            </AppBar>\n            <Form currentId={currentId} setCurrentId={setCurrentId} />{\" \"}\n            {/* passing the current Id as a prop into the form component. a setter method will be passed here as well  */}\n\n            {/* ^^^^ we are calling our pagination component below the form */}\n            <Paper className={classes.pagination} elevation={6}>\n              <Pagination/>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n    </Grow>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}