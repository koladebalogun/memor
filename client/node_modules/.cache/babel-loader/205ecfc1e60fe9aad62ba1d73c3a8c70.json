{"ast":null,"code":"// This is where all the routes are initiated from the backend to the front end\nimport axios from 'axios';\nconst API = axios.create({\n  baseURL: 'http://localhost:5000'\n}); // const url = 'http://localhost:5000/posts';\n\nAPI.interceptors.request.use(req => {\n  //this will send our token to the backend midddleware to verify that we are logged in\n  if (localStorage.getItem('profile')) {\n    req.headers.Authorization = `Bearer ${JSON.parse(localStorage.getItem('profile')).token}`; // this will get our token \n  }\n\n  return req;\n}); // export const fetchPosts = () => API.get('/posts'); //NORMAL GET REQUEST WITHOUT PAGES \n\nexport const fetchPost = id => API.get(`/posts/${id}`); //\n\nexport const fetchPosts = page => API.get(`/posts?page=${page}`); //from here, we move to the backend(controllers) to modfy the data for the specific page\n//^^^^^^\n\nexport const fetchPostsBySearch = searchQuery => API.get(`/posts/search?searchQuery=${searchQuery.search || 'none'}&tags=${searchQuery.tags}`); // Query parameters start with a ? and then you specify a variable name. if there is no search we want to show string of none. And in this searchquery, we'll also handle our tag search\n//^^^\n\nexport const createPost = newPost => API.post('/posts', newPost);\nexport const updatePost = (id, updatedPost) => API.patch(`/posts/${id}`, updatedPost);\nexport const deletePost = id => API.delete(`/posts/${id}`);\nexport const likePost = id => API.patch(`/posts/${id}/likePost`);\nexport const signIn = formData => API.post('/user/signin', formData);\nexport const signUp = formData => API.post('/user/signup', formData); //once we have the api requests here, we move on to Actions","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/api/index.js"],"names":["axios","API","create","baseURL","interceptors","request","use","req","localStorage","getItem","headers","Authorization","JSON","parse","token","fetchPost","id","get","fetchPosts","page","fetchPostsBySearch","searchQuery","search","tags","createPost","newPost","post","updatePost","updatedPost","patch","deletePost","delete","likePost","signIn","formData","signUp"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAa;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAb,CAAZ,C,CAEA;;AAEAF,GAAG,CAACG,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA8BC,GAAD,IAAS;AAAG;AACrC,MAAIC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAJ,EAAqC;AACjCF,IAAAA,GAAG,CAACG,OAAJ,CAAYC,aAAZ,GAA6B,UAASC,IAAI,CAACC,KAAL,CAAWL,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,EAA4CK,KAAM,EAAxF,CADiC,CAC0D;AAC9F;;AAED,SAAOP,GAAP;AACH,CAND,E,CASA;;AACA,OAAO,MAAMQ,SAAS,GAAIC,EAAD,IAAQf,GAAG,CAACgB,GAAJ,CAAS,UAASD,EAAG,EAArB,CAA1B,C,CAAmD;;AAC1D,OAAO,MAAME,UAAU,GAAIC,IAAD,IAAUlB,GAAG,CAACgB,GAAJ,CAAS,eAAcE,IAAK,EAA5B,CAA7B,C,CAA6D;AAEpE;;AACA,OAAO,MAAMC,kBAAkB,GAAIC,WAAD,IAAiBpB,GAAG,CAACgB,GAAJ,CAAS,6BAA4BI,WAAW,CAACC,MAAZ,IAAqB,MAAO,SAAQD,WAAW,CAACE,IAAK,EAA1F,CAA5C,C,CAA0I;AACjJ;;AACA,OAAO,MAAMC,UAAU,GAAIC,OAAD,IAAaxB,GAAG,CAACyB,IAAJ,CAAS,QAAT,EAAmBD,OAAnB,CAAhC;AACP,OAAO,MAAME,UAAU,GAAG,CAACX,EAAD,EAAKY,WAAL,KAAqB3B,GAAG,CAAC4B,KAAJ,CAAW,UAASb,EAAG,EAAvB,EAA0BY,WAA1B,CAAxC;AACP,OAAO,MAAME,UAAU,GAAId,EAAD,IAAQf,GAAG,CAAC8B,MAAJ,CAAY,UAASf,EAAG,EAAxB,CAA3B;AACP,OAAO,MAAMgB,QAAQ,GAAIhB,EAAD,IAAQf,GAAG,CAAC4B,KAAJ,CAAW,UAASb,EAAG,WAAvB,CAAzB;AAEP,OAAO,MAAMiB,MAAM,GAAIC,QAAD,IAAcjC,GAAG,CAACyB,IAAJ,CAAS,cAAT,EAAyBQ,QAAzB,CAA7B;AACP,OAAO,MAAMC,MAAM,GAAID,QAAD,IAAcjC,GAAG,CAACyB,IAAJ,CAAS,cAAT,EAAyBQ,QAAzB,CAA7B,C,CAGP","sourcesContent":["// This is where all the routes are initiated from the backend to the front end\nimport axios from 'axios';\n\nconst API = axios.create({ baseURL: 'http://localhost:5000' })\n\n// const url = 'http://localhost:5000/posts';\n\nAPI.interceptors.request.use((req) => {  //this will send our token to the backend midddleware to verify that we are logged in\n    if (localStorage.getItem('profile')) {\n        req.headers.Authorization = `Bearer ${JSON.parse(localStorage.getItem('profile')).token}`; // this will get our token \n    }\n\n    return req;\n})\n\n\n// export const fetchPosts = () => API.get('/posts'); //NORMAL GET REQUEST WITHOUT PAGES \nexport const fetchPost = (id) => API.get(`/posts/${id}`); //\nexport const fetchPosts = (page) => API.get(`/posts?page=${page}`); //from here, we move to the backend(controllers) to modfy the data for the specific page\n\n//^^^^^^\nexport const fetchPostsBySearch = (searchQuery) => API.get(`/posts/search?searchQuery=${searchQuery.search ||'none'}&tags=${searchQuery.tags}`); // Query parameters start with a ? and then you specify a variable name. if there is no search we want to show string of none. And in this searchquery, we'll also handle our tag search\n//^^^\nexport const createPost = (newPost) => API.post('/posts', newPost);\nexport const updatePost = (id, updatedPost) => API.patch(`/posts/${id}`, updatedPost);\nexport const deletePost = (id) => API.delete(`/posts/${id}`);\nexport const likePost = (id) => API.patch(`/posts/${id}/likePost`);\n\nexport const signIn = (formData) => API.post('/user/signin', formData);\nexport const signUp = (formData) => API.post('/user/signup', formData);\n\n\n//once we have the api requests here, we move on to Actions"]},"metadata":{},"sourceType":"module"}