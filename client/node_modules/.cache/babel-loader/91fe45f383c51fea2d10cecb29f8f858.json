{"ast":null,"code":"var _jsxFileName = \"/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Auth/Input.js\";\nimport React from \"react\";\nimport { TextField, Grid, InputAdornment, IconButton } from \"@material-ui/core\";\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibiltyOff from '@material-ui/icons/VisibiltyOff';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = _ref => {\n  let {\n    label,\n    name,\n    handleChange,\n    handleShowPassword,\n    autoFocus,\n    type,\n    half\n  } = _ref;\n  // This props would enable us have dynamic values\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    xs: 12,\n    sm: half ? 6 : 12,\n    children: [\" \", /*#__PURE__*/_jsxDEV(TextField, {\n      name: name,\n      onChange: handleChange,\n      variant: \"outlined\",\n      required: true,\n      fullWidth: true,\n      label: label,\n      autoFocus: autoFocus,\n      type: type,\n      InputProps: name === 'password' && {\n        // In javascript, when there's a ternary operator with the second value being null, use && and you won't have to provide the null. \n        endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"end\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: handleShowPassword,\n            children: type === \"password\" ? /*#__PURE__*/_jsxDEV(Visibilty, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 53\n            }, this) : /*#__PURE__*/_jsxDEV(VisibiltyOff, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 69\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)\n      } //For show password icon\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Input;\nexport default Input; //we are creating a Grid that all of our items would have, this would save the trouble of writing it multiple times\n// when we have some components that look a behave the same, we create a new custom component that will generalize the logic by. This will be a component that will hold similar details and we'll just specify the things that change.\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Auth/Input.js"],"names":["React","TextField","Grid","InputAdornment","IconButton","Visibility","VisibiltyOff","Input","label","name","handleChange","handleShowPassword","autoFocus","type","half","endAdornment"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,cAA1B,EAA0CC,UAA1C,QAA4D,mBAA5D;AAEA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,YAAP,MAAyB,iCAAzB;;;AAEA,MAAMC,KAAK,GAAG,QAA8E;AAAA,MAA7E;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,YAAf;AAA6BC,IAAAA,kBAA7B;AAAiDC,IAAAA,SAAjD;AAA4DC,IAAAA,IAA5D;AAAkEC,IAAAA;AAAlE,GAA6E;AAAE;AAC1F,sBACI,QAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAEA,IAAI,GAAG,CAAH,GAAO,EAAlC;AAAA,iCAEA,QAAC,SAAD;AACI,MAAA,IAAI,EAAEL,IADV;AAEI,MAAA,QAAQ,EAAEC,YAFd;AAGI,MAAA,OAAO,EAAC,UAHZ;AAII,MAAA,QAAQ,MAJZ;AAKI,MAAA,SAAS,MALb;AAMI,MAAA,KAAK,EAAEF,KANX;AAOI,MAAA,SAAS,EAAEI,SAPf;AAQI,MAAA,IAAI,EAAEC,IARV;AASI,MAAA,UAAU,EAAGJ,IAAI,KAAK,UAAT,IAAuB;AAAE;AAClCM,QAAAA,YAAY,eACR,QAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC,KAAzB;AAAA,iCACI,QAAC,UAAD;AAAY,YAAA,OAAO,EAAEJ,kBAArB;AAAA,sBACME,IAAI,KAAK,UAAT,gBAAsB,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,oBAAtB,gBAAsC,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAD5C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAF4B,OATxC,CAiBO;;AAjBP;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH,CA1BD;;KAAMN,K;AA4BN,eAAeA,KAAf,C,CAEA;AAEA","sourcesContent":["import React from \"react\";\nimport { TextField, Grid, InputAdornment, IconButton } from \"@material-ui/core\";\n\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibiltyOff from '@material-ui/icons/VisibiltyOff';\n\nconst Input = ({ label, name, handleChange, handleShowPassword, autoFocus, type, half }) => { // This props would enable us have dynamic values\n    return ( \n        <Grid item xs={12} sm={half ? 6 : 12 }> {/* e.g if we want some inputs to take half the width, we'll have a special prop ( half ) so if half is true we want it to take half the width which is 6 else it should remain the initial width set which is 12 */}\n\n        <TextField\n            name={name}\n            onChange={handleChange}\n            variant=\"outlined\"\n            required\n            fullWidth\n            label={label}\n            autoFocus={autoFocus}\n            type={type}\n            InputProps={ name === 'password' && { // In javascript, when there's a ternary operator with the second value being null, use && and you won't have to provide the null. \n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        <IconButton onClick={handleShowPassword}>\n                            { type === \"password\" ? <Visibilty /> : <VisibiltyOff /> }\n                            </IconButton>\n                    </InputAdornment>\n                )\n            }} //For show password icon\n        />\n\n        </Grid>\n     );\n}\n \nexport default Input;\n\n//we are creating a Grid that all of our items would have, this would save the trouble of writing it multiple times\n\n// when we have some components that look a behave the same, we create a new custom component that will generalize the logic by. This will be a component that will hold similar details and we'll just specify the things that change.\n"]},"metadata":{},"sourceType":"module"}