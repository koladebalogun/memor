{"ast":null,"code":"import _toConsumableArray from\"/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{FETCH_ALL,FETCH_POST,FETCH_BY_SEARCH,CREATE,UPDATE,DELETE,START_LOADING,END_LOADING,COMMENT}from'../constants/actionTypes';export default(function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{isLoading:true,posts:[]};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case START_LOADING:return _objectSpread(_objectSpread({},state),{},{isLoading:true});case END_LOADING:return _objectSpread(_objectSpread({},state),{},{isLoading:false});case FETCH_ALL:return _objectSpread(_objectSpread({},state),{},{posts:action.payload.data,//here our post would be equal to action.payload.data\ncurrentPage:action.payload.currentPage,numberOfPages:action.payload.numberOfPages});case CREATE://for creating new posts\nreturn _objectSpread(_objectSpread({},state),{},{posts:[].concat(_toConsumableArray(state.posts),[action.payload])});//the posts would be added to the action.payload\ncase START_LOADING:return _objectSpread(_objectSpread({},state),{},{isLoading:true});case END_LOADING:return _objectSpread(_objectSpread({},state),{},{isLoading:false});case FETCH_BY_SEARCH:return _objectSpread(_objectSpread({},state),{},{posts:action.payload});case FETCH_POST:return _objectSpread(_objectSpread({},state),{},{post:action.payload});case DELETE:return _objectSpread(_objectSpread({},state),{},{posts:state.posts.filter(function(post){return post._id!==action.payload;})});// we're returning all the posts, but filtering out the one we deleted\ncase UPDATE:return _objectSpread(_objectSpread({},state),{},{posts:state.posts.map(function(post){return post._id===action.payload._id?action.payload:post;})});case COMMENT:return _objectSpread(_objectSpread({},state),{},{posts:state.posts.map(function(post){//return all the other posts normally, and change the post that just received a comment\nif(post._id===action.payload._id)return action.payload;return post;})});default:return state;}});","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/src/reducers/posts.js"],"names":["FETCH_ALL","FETCH_POST","FETCH_BY_SEARCH","CREATE","UPDATE","DELETE","START_LOADING","END_LOADING","COMMENT","state","isLoading","posts","action","type","payload","data","currentPage","numberOfPages","post","filter","_id","map"],"mappings":"qXAAA,OAASA,SAAT,CAAoBC,UAApB,CAAgCC,eAAhC,CAAiDC,MAAjD,CAAyDC,MAAzD,CAAkEC,MAAlE,CAA0EC,aAA1E,CAAyFC,WAAzF,CAAsGC,OAAtG,KAAqH,0BAArH,CAIA,eAAe,UAAoD,IAAnDC,CAAAA,KAAmD,2DAA3C,CAAEC,SAAS,CAAE,IAAb,CAAmBC,KAAK,CAAE,EAA1B,CAA2C,IAAXC,CAAAA,MAAW,2CACjE,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKP,CAAAA,aAAL,CACE,sCAAYG,KAAZ,MAAmBC,SAAS,CAAE,IAA9B,GACF,IAAKH,CAAAA,WAAL,CACE,sCAAYE,KAAZ,MAAmBC,SAAS,CAAE,KAA9B,GACF,IAAKV,CAAAA,SAAL,CACE,sCACKS,KADL,MAEEE,KAAK,CAAEC,MAAM,CAACE,OAAP,CAAeC,IAFxB,CAE8B;AAC5BC,WAAW,CAAEJ,MAAM,CAACE,OAAP,CAAeE,WAH9B,CAIEC,aAAa,CAAEL,MAAM,CAACE,OAAP,CAAeG,aAJhC,GAMF,IAAKd,CAAAA,MAAL,CAAa;AACX,sCAAWM,KAAX,MAAkBE,KAAK,8BAAMF,KAAK,CAACE,KAAZ,GAAmBC,MAAM,CAACE,OAA1B,EAAvB,GAA4D;AAC5D,IAAKR,CAAAA,aAAL,CACE,sCAAYG,KAAZ,MAAmBC,SAAS,CAAE,IAA9B,GACF,IAAKH,CAAAA,WAAL,CACE,sCAAYE,KAAZ,MAAmBC,SAAS,CAAE,KAA9B,GACJ,IAAKR,CAAAA,eAAL,CACE,sCAAWO,KAAX,MAAkBE,KAAK,CAAEC,MAAM,CAACE,OAAhC,GACF,IAAKb,CAAAA,UAAL,CACE,sCAAWQ,KAAX,MAAkBS,IAAI,CAAEN,MAAM,CAACE,OAA/B,GACF,IAAKT,CAAAA,MAAL,CACE,sCAAWI,KAAX,MAAkBE,KAAK,CAAGF,KAAK,CAACE,KAAN,CAAYQ,MAAZ,CAAmB,SAACD,IAAD,QAAUA,CAAAA,IAAI,CAACE,GAAL,GAAaR,MAAM,CAACE,OAA9B,EAAnB,CAA1B,GAAsF;AACxF,IAAKV,CAAAA,MAAL,CACE,sCAAWK,KAAX,MAAkBE,KAAK,CAAEF,KAAK,CAACE,KAAN,CAAYU,GAAZ,CAAgB,SAACH,IAAD,QACvCA,CAAAA,IAAI,CAACE,GAAL,GAAaR,MAAM,CAACE,OAAP,CAAeM,GAA5B,CAAkCR,MAAM,CAACE,OAAzC,CAAmDI,IADZ,EAAhB,CAAzB,GAGF,IAAKV,CAAAA,OAAL,CACE,sCACKC,KADL,MAEEE,KAAK,CAAEF,KAAK,CAACE,KAAN,CAAYU,GAAZ,CAAgB,SAACH,IAAD,CAAU,CAAE;AACjC,GAAGA,IAAI,CAACE,GAAL,GAAaR,MAAM,CAACE,OAAP,CAAeM,GAA/B,CAAoC,MAAOR,CAAAA,MAAM,CAACE,OAAd,CAEpC,MAAOI,CAAAA,IAAP,CACD,CAJM,CAFT,GASF,QACE,MAAOT,CAAAA,KAAP,CAvCJ,CAyCD,CA1CD","sourcesContent":["import { FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE , DELETE, START_LOADING, END_LOADING, COMMENT } from '../constants/actionTypes';\n\n\n\nexport default (state = { isLoading: true, posts: [] }, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, isLoading: true };\n    case END_LOADING:\n      return { ...state, isLoading: false };\n    case FETCH_ALL:\n      return {  \n        ...state,\n        posts: action.payload.data, //here our post would be equal to action.payload.data\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages,\n      };\n    case CREATE: //for creating new posts\n      return {...state, posts:[ ...state.posts, action.payload]}; //the posts would be added to the action.payload\n      case START_LOADING:\n        return { ...state, isLoading: true };\n      case END_LOADING:\n        return { ...state, isLoading: false };\n    case FETCH_BY_SEARCH:\n      return {...state, posts: action.payload }\n    case FETCH_POST:\n      return {...state, post: action.payload }\n    case DELETE:\n      return {...state, posts:  state.posts.filter((post) => post._id !== action.payload )} // we're returning all the posts, but filtering out the one we deleted\n    case UPDATE:\n      return {...state, posts: state.posts.map((post) =>\n        post._id === action.payload._id ? action.payload : post\n      )};\n    case COMMENT:\n      return {\n        ...state, \n        posts: state.posts.map((post) => { //return all the other posts normally, and change the post that just received a comment\n          if(post._id === action.payload._id) return action.payload\n\n          return post;\n        })\n        };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}