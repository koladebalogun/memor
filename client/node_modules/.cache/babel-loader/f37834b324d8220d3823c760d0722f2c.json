{"ast":null,"code":"import { FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE, DELETE, START_LOADING, END_LOADING, COMMENT } from '../constants/actionTypes';\nexport default (function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    isLoading: true,\n    posts: []\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case END_LOADING:\n      return { ...state,\n        isLoading: false\n      };\n\n    case FETCH_ALL:\n      return { ...state,\n        posts: action.payload.data,\n        //here our post would be equal to action.payload.data\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages\n      };\n\n    case CREATE:\n      //for creating new posts\n      return { ...state,\n        posts: [...state.posts, action.payload]\n      };\n    //the posts would be added to the action.payload\n\n    case START_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case END_LOADING:\n      return { ...state,\n        isLoading: false\n      };\n\n    case FETCH_BY_SEARCH:\n      return { ...state,\n        posts: action.payload\n      };\n\n    case FETCH_POST:\n      return { ...state,\n        post: action.payload\n      };\n\n    case DELETE:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== action.payload)\n      };\n    // we're returning all the posts, but filtering out the one we deleted\n\n    case UPDATE:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    case COMMENT:\n      return { ...state,\n        posts: state.posts.map(post => {\n          //return all the other posts normally, and change the post that just received a comment\n          if (post._id === action.payload._id) return action.payload;\n          return post;\n        })\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/reducers/posts.js"],"names":["FETCH_ALL","FETCH_POST","FETCH_BY_SEARCH","CREATE","UPDATE","DELETE","START_LOADING","END_LOADING","COMMENT","state","isLoading","posts","action","type","payload","data","currentPage","numberOfPages","post","filter","_id","map"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,eAAhC,EAAiDC,MAAjD,EAAyDC,MAAzD,EAAkEC,MAAlE,EAA0EC,aAA1E,EAAyFC,WAAzF,EAAsGC,OAAtG,QAAqH,0BAArH;AAIA,gBAAe,YAAoD;AAAA,MAAnDC,KAAmD,uEAA3C;AAAEC,IAAAA,SAAS,EAAE,IAAb;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAA2C;AAAA,MAAXC,MAAW;;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,aAAL;AACE,aAAO,EAAE,GAAGG,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACF,SAAKH,WAAL;AACE,aAAO,EAAE,GAAGE,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACD,SAAKV,SAAL;AACC,aAAO,EACL,GAAGS,KADE;AAELE,QAAAA,KAAK,EAAEC,MAAM,CAACE,OAAP,CAAeC,IAFjB;AAEuB;AAC5BC,QAAAA,WAAW,EAAEJ,MAAM,CAACE,OAAP,CAAeE,WAHvB;AAILC,QAAAA,aAAa,EAAEL,MAAM,CAACE,OAAP,CAAeG;AAJzB,OAAP;;AAMF,SAAKd,MAAL;AAAa;AACX,aAAO,EAAC,GAAGM,KAAJ;AAAWE,QAAAA,KAAK,EAAC,CAAE,GAAGF,KAAK,CAACE,KAAX,EAAkBC,MAAM,CAACE,OAAzB;AAAjB,OAAP;AAA4D;;AAC5D,SAAKR,aAAL;AACE,aAAO,EAAE,GAAGG,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACF,SAAKH,WAAL;AACE,aAAO,EAAE,GAAGE,KAAL;AAAYC,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACJ,SAAKR,eAAL;AACE,aAAO,EAAC,GAAGO,KAAJ;AAAWE,QAAAA,KAAK,EAAEC,MAAM,CAACE;AAAzB,OAAP;;AACF,SAAKb,UAAL;AACE,aAAO,EAAC,GAAGQ,KAAJ;AAAWS,QAAAA,IAAI,EAAEN,MAAM,CAACE;AAAxB,OAAP;;AACF,SAAKT,MAAL;AACE,aAAO,EAAC,GAAGI,KAAJ;AAAWE,QAAAA,KAAK,EAAGF,KAAK,CAACE,KAAN,CAAYQ,MAAZ,CAAoBD,IAAD,IAAUA,IAAI,CAACE,GAAL,KAAaR,MAAM,CAACE,OAAjD;AAAnB,OAAP;AAAsF;;AACxF,SAAKV,MAAL;AACE,aAAO,EAAC,GAAGK,KAAJ;AAAWE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYU,GAAZ,CAAiBH,IAAD,IACvCA,IAAI,CAACE,GAAL,KAAaR,MAAM,CAACE,OAAP,CAAeM,GAA5B,GAAkCR,MAAM,CAACE,OAAzC,GAAmDI,IAD5B;AAAlB,OAAP;;AAGF,SAAKV,OAAL;AACE,aAAO,EACL,GAAGC,KADE;AAELE,QAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYU,GAAZ,CAAiBH,IAAD,IAAU;AAAE;AACjC,cAAGA,IAAI,CAACE,GAAL,KAAaR,MAAM,CAACE,OAAP,CAAeM,GAA/B,EAAoC,OAAOR,MAAM,CAACE,OAAd;AAEpC,iBAAOI,IAAP;AACD,SAJM;AAFF,OAAP;;AASF;AACE,aAAOT,KAAP;AAvCJ;AAyCD,CA1CD","sourcesContent":["import { FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE , DELETE, START_LOADING, END_LOADING, COMMENT } from '../constants/actionTypes';\n\n\n\nexport default (state = { isLoading: true, posts: [] }, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, isLoading: true };\n    case END_LOADING:\n      return { ...state, isLoading: false };\n     case FETCH_ALL:\n      return {  \n        ...state,\n        posts: action.payload.data, //here our post would be equal to action.payload.data\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages,\n      };\n    case CREATE: //for creating new posts\n      return {...state, posts:[ ...state.posts, action.payload]}; //the posts would be added to the action.payload\n      case START_LOADING:\n        return { ...state, isLoading: true };\n      case END_LOADING:\n        return { ...state, isLoading: false };\n    case FETCH_BY_SEARCH:\n      return {...state, posts: action.payload }\n    case FETCH_POST:\n      return {...state, post: action.payload }\n    case DELETE:\n      return {...state, posts:  state.posts.filter((post) => post._id !== action.payload )} // we're returning all the posts, but filtering out the one we deleted\n    case UPDATE:\n      return {...state, posts: state.posts.map((post) =>\n        post._id === action.payload._id ? action.payload : post\n      )};\n    case COMMENT:\n      return {\n        ...state, \n        posts: state.posts.map((post) => { //return all the other posts normally, and change the post that just received a comment\n          if(post._id === action.payload._id) return action.payload\n\n          return post;\n        })\n        };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}