{"ast":null,"code":"var _jsxFileName = \"/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Form/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from \"react-file-base64\";\nimport { useDispatch, useSelector } from \"react-redux\"; //** */\n\nimport useStyles from \"./styles\";\nimport { createPost, updatePost } from \"../../actions/posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = _ref => {\n  _s();\n\n  let {\n    currentId,\n    setCurrentId\n  } = _ref;\n  const [postData, setPostData] = useState({\n    title: \"\",\n    message: \"\",\n    tags: \"\",\n    selectedFile: \"\"\n  });\n  const user = JSON.parse(localStorage.getItem('profile')); // updating the field of the form with the values of the post we want to update ****\n\n  const post = useSelector(state => currentId ? state.posts.find(p => p._id === currentId) : null); // if we have a current id, we want to loop over state.posts and we want to call a find method on them we want to find the post(p) that has the same id as the current id. if we don't have the current id, return null\n\n  const classes = useStyles();\n  const dispatch = useDispatch(); // use the useEffect hook to populate the values of the form\n\n  useEffect(() => {\n    if (post) setPostData(post); //if post exist, we'll setpostdata and populate it with the data of the post\n\n    console.log(post);\n  }, [post]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (currentId === 0) {\n      var _user$result;\n\n      dispatch(createPost({ ...postData,\n        name: user === null || user === void 0 ? void 0 : (_user$result = user.result) === null || _user$result === void 0 ? void 0 : _user$result.name\n      }));\n    } else {\n      dispatch(updatePost(currentId, {\n        postData\n      })); //This means if we have a currently selected id, we should update/edit the post of the current id, with a new post data\n    }\n  };\n\n  const clear = () => {\n    setCurrentId(null);\n    setPostData({\n      title: \"\",\n      message: \"\",\n      tags: \"\",\n      selectedFile: \"\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form} `,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Creating a Memory\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"title\",\n        variant: \"outlined\",\n        label: \"Title\",\n        fullWidth: true,\n        value: postData.title,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        }) // this will enable us change the value of this specific field\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"message\",\n        variant: \"outlined\",\n        label: \"Message\",\n        fullWidth: true,\n        value: postData.message,\n        onChange: e => setPostData({ ...postData,\n          message: e.target.value\n        }) // this will enable us change the value of this specific field\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"tags\",\n        variant: \"outlined\",\n        label: \"Tags\",\n        fullWidth: true,\n        value: postData.tags,\n        onChange: e => setPostData({ ...postData,\n          tags: e.target.value.split(',')\n        }) // this will enable us change the value of this specific field\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.fileInput,\n        children: /*#__PURE__*/_jsxDEV(FileBase, {\n          type: \"file\",\n          multiple: false,\n          onDone: _ref2 => {\n            let {\n              base64\n            } = _ref2;\n            return setPostData({ ...postData,\n              selectedFile: base64\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"rJ5/hyiuC/yR7GkgkCjhgYtg2PA=\", false, function () {\n  return [useSelector, useStyles, useDispatch];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/Memoirs project/client/src/components/Form/Form.js"],"names":["React","useState","useEffect","TextField","Button","Typography","Paper","FileBase","useDispatch","useSelector","useStyles","createPost","updatePost","Form","currentId","setCurrentId","postData","setPostData","title","message","tags","selectedFile","user","JSON","parse","localStorage","getItem","post","state","posts","find","p","_id","classes","dispatch","console","log","handleSubmit","e","preventDefault","name","result","clear","paper","root","form","target","value","split","fileInput","base64","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from \"react-file-base64\";\nimport { useDispatch, useSelector } from \"react-redux\"; //** */\n\nimport useStyles from \"./styles\";\nimport { createPost, updatePost } from \"../../actions/posts\";\n\nconst Form = ({ currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({\n    title: \"\",\n    message: \"\",\n    tags: \"\",\n    selectedFile: \"\",\n  });\n\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n  // updating the field of the form with the values of the post we want to update ****\n  const post = useSelector((state) =>\n    currentId ? state.posts.find((p) => p._id === currentId) : null\n  ); // if we have a current id, we want to loop over state.posts and we want to call a find method on them we want to find the post(p) that has the same id as the current id. if we don't have the current id, return null\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  // use the useEffect hook to populate the values of the form\n  useEffect(() => {\n    if (post) setPostData(post); //if post exist, we'll setpostdata and populate it with the data of the post\n\n    console.log(post);\n  }, [post]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (currentId === 0 ) {\n      dispatch(createPost({ ...postData, name:  user?.result?.name})); \n    } else {\n      dispatch(updatePost(currentId, {postData})); //This means if we have a currently selected id, we should update/edit the post of the current id, with a new post data\n    }\n  };\n\n  const clear = () => {\n    setCurrentId(null);\n    setPostData({\n      title: \"\",\n      message: \"\",\n      tags: \"\",\n      selectedFile: \"\",\n    });\n  };\n\n  return (\n    <Paper className={classes.paper}>\n      <form\n        autoComplete=\"off\"\n        noValidate\n        className={`${classes.root} ${classes.form} `}\n        onSubmit={handleSubmit}\n      >\n        <Typography variant=\"h6\">Creating a Memory</Typography>\n        {/* <TextField\n          name=\"creator\"\n          variant=\"outlined\"\n          label=\"Creator\"\n          fullWidth\n          value={postData.creator}\n          onChange={(e) =>\n            setPostData({ ...postData, creator: e.target.value })\n          } // this will enable us change the value of this specific field\n        /> */}\n        <TextField\n          name=\"title\"\n          variant=\"outlined\"\n          label=\"Title\"\n          fullWidth\n          value={postData.title}\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })} // this will enable us change the value of this specific field\n        />\n        <TextField\n          name=\"message\"\n          variant=\"outlined\"\n          label=\"Message\"\n          fullWidth\n          value={postData.message}\n          onChange={(e) =>\n            setPostData({ ...postData, message: e.target.value })\n          } // this will enable us change the value of this specific field\n        />\n        <TextField\n          name=\"tags\"\n          variant=\"outlined\"\n          label=\"Tags\"\n          fullWidth\n          value={postData.tags}\n          onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} // this will enable us change the value of this specific field\n        />\n        <div className={classes.fileInput}>\n          <FileBase\n            type=\"file\"\n            multiple={false}\n            onDone={({ base64 }) =>\n              setPostData({ ...postData, selectedFile: base64 })\n            }\n          />\n        </div>\n        <Button\n          className={classes.buttonSubmit}\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          type=\"submit\"\n          fullWidth\n        >\n          Submit\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          onClick={clear}\n          fullWidth\n        >\n          Clear\n        </Button>\n      </form>\n    </Paper>\n  );\n};\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}