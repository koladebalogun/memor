{"ast":null,"code":"import _objectSpread from\"/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useEffect}from\"react\";import{Pagination,PaginationItem}from'@material-ui/lab';import useStyles from'./styles';import{Link}from\"react-router-dom\";import{useDispatch,useSelector}from'react-redux';// allows us to dispatch redux actions\nimport{getPosts}from'../actions/posts';import{jsx as _jsx}from\"react/jsx-runtime\";var Paginate=function Paginate(_ref){var page=_ref.page;var classes=useStyles();var dispatch=useDispatch();var _useSelector=useSelector(function(state){return state.posts;}),numberOfPages=_useSelector.numberOfPages;//getting the number of pages with use Selector\nuseEffect(function(){if(page)dispatch(getPosts(page));},[page]);//in this hook, we want to fetch the post anytime the page changes,\nreturn/*#__PURE__*/_jsx(Pagination,{classes:{ul:classes.ul},count:numberOfPages//this fetches the number of count depending on the number of pages we have.\n,page:Number(page)||1,variant:\"outlined\",color:\"primary\",renderItem:function renderItem(item){return/*#__PURE__*/_jsx(PaginationItem,_objectSpread(_objectSpread({},item),{},{component:Link,to:\"/posts?page=\".concat(item.page)}));}});};export default Paginate;// Our current static pagination is now done, we'll import it inside the home component","map":{"version":3,"sources":["/Users/koladebalogun/Desktop/New-Projects/Memoirs project/client/src/components/Pagination.jsx"],"names":["React","useEffect","Pagination","PaginationItem","useStyles","Link","useDispatch","useSelector","getPosts","Paginate","page","classes","dispatch","state","posts","numberOfPages","ul","Number","item"],"mappings":"sLAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA,OAASC,UAAT,CAAqBC,cAArB,KAA2C,kBAA3C,CACA,MAAOC,CAAAA,SAAP,KAAsB,UAAtB,CACA,OAASC,IAAT,KAAqB,kBAArB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAAwD;AAExD,OAASC,QAAT,KAAyB,kBAAzB,C,2CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAY,IAAVC,CAAAA,IAAU,MAAVA,IAAU,CACzB,GAAMC,CAAAA,OAAO,CAAGP,SAAS,EAAzB,CACA,GAAMQ,CAAAA,QAAQ,CAAGN,WAAW,EAA5B,CACA,iBAA0BC,WAAW,CAAC,SAACM,KAAD,QAAWA,CAAAA,KAAK,CAACC,KAAjB,EAAD,CAArC,CAAQC,aAAR,cAAQA,aAAR,CAA+D;AAE/Dd,SAAS,CAAC,UAAM,CACZ,GAAGS,IAAH,CAASE,QAAQ,CAACJ,QAAQ,CAACE,IAAD,CAAT,CAAR,CACZ,CAFQ,CAEN,CAACA,IAAD,CAFM,CAAT,CAEY;AAEZ,mBACI,KAAC,UAAD,EACI,OAAO,CAAE,CAAEM,EAAE,CAAEL,OAAO,CAACK,EAAd,CADb,CAEI,KAAK,CAAED,aAAe;AAF1B,CAGI,IAAI,CAAEE,MAAM,CAACP,IAAD,CAAN,EAAgB,CAH1B,CAII,OAAO,CAAC,UAJZ,CAKI,KAAK,CAAC,SALV,CAMI,UAAU,CAAG,oBAACQ,IAAD,qBACT,KAAC,cAAD,gCAAoBA,IAApB,MAA0B,SAAS,CAAEb,IAArC,CAA2C,EAAE,uBAAiBa,IAAI,CAACR,IAAtB,CAA7C,GADS,EANjB,EADJ,CAYH,CArBD,CAuBA,cAAeD,CAAAA,QAAf,CAEA","sourcesContent":["import React, {useEffect} from \"react\";\nimport { Pagination, PaginationItem } from '@material-ui/lab';\nimport useStyles from './styles'; \nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from 'react-redux'; // allows us to dispatch redux actions\n\nimport { getPosts } from '../actions/posts'\n\nconst Paginate = ({page}) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const { numberOfPages } = useSelector((state) => state.posts); //getting the number of pages with use Selector\n    \n    useEffect(() => {\n        if(page) dispatch(getPosts(page));\n    }, [page]); //in this hook, we want to fetch the post anytime the page changes,\n    \n    return ( \n        <Pagination\n            classes={{ ul: classes.ul}}\n            count={numberOfPages} //this fetches the number of count depending on the number of pages we have.\n            page={Number(page) || 1 } \n            variant=\"outlined\"\n            color=\"primary\"\n            renderItem ={(item) => (\n                <PaginationItem {...item} component={Link} to={`/posts?page=${item.page}`}/>\n            )}\n        />\n     );\n}\n \nexport default Paginate;\n\n// Our current static pagination is now done, we'll import it inside the home component"]},"metadata":{},"sourceType":"module"}