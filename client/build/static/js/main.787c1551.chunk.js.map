{"version":3,"sources":["constants/actionTypes.js","reducers/auth.js","reducers/index.js","reducers/posts.js","components/PostDetails/styles.js","api/index.js","actions/posts.js","components/PostDetails/CommentSection.jsx","components/PostDetails/PostDetails.jsx","components/Navbar/styles.js","images/memories.png","components/Navbar/Navbar.js","components/styles.js","components/Pagination.jsx","styles.js","components/Posts/Post/styles.js","components/Posts/Post/Post.js","components/Posts/styles.js","components/Posts/Posts.js","components/Form/styles.js","components/Form/Form.js","components/Home/Home.js","components/Auth/icon.js","components/Auth/styles.js","components/Auth/Input.js","components/Auth/Auth.js","actions/auth.js","App.js","index.js"],"names":["CREATE","UPDATE","DELETE","COMMENT","FETCH_ALL","FETCH_POST","FETCH_BY_SEARCH","START_LOADING","END_LOADING","AUTH","LOGOUT","authReducer","state","authData","action","type","localStorage","setItem","JSON","stringify","data","clear","combineReducers","posts","isLoading","payload","currentPage","numberOfPages","post","filter","_id","map","auth","makeStyles","theme","media","borderRadius","objectFit","width","maxHeight","card","display","breakpoints","down","flexWrap","flexDirection","section","margin","flex","imageSection","marginLeft","recommendedPosts","loadingPaper","justifyContent","alignItems","padding","height","commentsOuterContainer","commentsInnerContainer","overflowY","marginRight","API","axios","create","baseURL","interceptors","request","use","req","getItem","headers","Authorization","parse","token","fetchPost","id","get","fetchPosts","page","fetchPostsBySearch","searchQuery","search","tags","updatePost","updatedPost","patch","deletePost","delete","likePost","comment","value","signIn","formData","signUp","getPostsBySearch","dispatch","a","api","console","log","commentPost","comments","CommentSection","classes","useStyles","useDispatch","useState","setComments","setComment","user","commentsRef","useRef","handleClick","finalComment","result","name","newComments","current","scrollIntoView","behavior","className","Typography","gutterBottom","variant","index","split","ref","style","TextField","fullWidth","rows","label","multiline","onChange","e","target","Button","marginTop","disabled","color","onClick","PostDetails","useSelector","navigate","useNavigate","useParams","useEffect","message","getPost","join","Paper","elevation","CircularProgress","size","component","title","tag","moment","createdAt","fromNow","Divider","src","selectedFile","alt","length","likes","cursor","openPost","appBar","heading","textDecoration","image","toolbar","profile","userName","brandContainer","purple","palette","getContrastText","deepPurple","backgroundColor","Navbar","location","useLocation","setUser","logout","decode","exp","Date","getTime","AppBar","position","Link","to","align","memories","Toolbar","Avatar","imageUrl","charAt","ul","Paginate","getPosts","Pagination","count","Number","renderItem","item","PaginationItem","mainContainer","paddingTop","backgroundBlendMode","border","fullHeightCard","overlay","top","left","overlay2","right","grid","details","cardActions","cardAction","textAlign","Post","setCurrentId","setLikes","hasLikedPost","find","like","googleId","handleLike","Likes","fontSize","Card","raised","ButtonBase","CardMedia","creator","CardContent","CardActions","smMargin","spacing","actionDiv","Posts","Grid","container","xs","sm","md","lg","root","paper","form","fileInput","buttonSubmit","marginBottom","Form","currentId","postData","setPostData","p","autoComplete","noValidate","onSubmit","preventDefault","newPost","createPost","multiple","onDone","base64","Home","query","URLSearchParams","setSearch","setTags","searchPost","trim","Grow","in","Container","maxWidth","gridContainer","appBarSearch","onKeyPress","keyCode","onAdd","onDelete","tagToDelete","searchButton","pagination","icon","viewBox","fill","d","avatar","secondary","main","submit","googleButton","Input","handleChange","handleShowPassword","autoFocus","half","required","InputProps","endAdornment","InputAdornment","IconButton","initialState","firstName","lastName","email","password","confirmPassword","Auth","isSignup","setIsSignup","showPassword","setShowPassword","setFormData","googleSuccess","res","profileObj","tokenId","error","signup","signin","prevShowPassword","clientId","render","renderProps","startIcon","onSuccess","onFailure","cookiePolicy","prevIsSignup","App","path","element","store","createStore","reducers","compose","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.787c1551.chunk.js","sourcesContent":["export const CREATE = 'CREATE';\nexport const UPDATE = 'UPDATE';\nexport const DELETE = 'DELETE';\nexport const COMMENT = 'COMMENT';\nexport const FETCH_ALL = 'FETCH_ALL';\nexport const FETCH_POST = 'FETCH_POST'; //for fetching single post(post with more details)\nexport const FETCH_BY_SEARCH = 'FETCH_BY_SEARCH';\n\n//THESE WOULD LET OUR REDUX REDUCERS KNOW WHEN TO START AND STOP LOADING\nexport const START_LOADING = 'START_LOADING';\nexport const END_LOADING = 'END_LOADING';\n\n\n\n//For the Authentication\nexport const AUTH = 'AUTH';\nexport const LOGOUT = 'LOGOUT';\n\n","import { AUTH, LOGOUT } from \"../constants/actionTypes\";\n\nconst authReducer = (state = { authData: null }, action) => {\n  switch (action.type) {\n    case AUTH:\n      localStorage.setItem(\"profile\", JSON.stringify({ ...action?.data })); //save the data in local storage so on page refresh, the browser will still know we are logged in\n      return { ...state, authData: action?.data };\n\n    case LOGOUT:\n      localStorage.clear();\n\n      return { ...state, authData: null };\n    default:\n      return state;\n  }\n};\n\nexport default authReducer;\n\n//from here, we move to the index.js of our reducers and import it there\n\n//Afterwards, we move to Navbar because that's the best place to use this data since we already have our user which is currently set to null in that component.\n","import { combineReducers } from \"redux\";\n\nimport posts from './posts';\nimport auth from './auth';\n\nexport  default combineReducers({ posts, auth});\n\n","import { FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE , DELETE, START_LOADING, END_LOADING, COMMENT } from '../constants/actionTypes';\n\n\n\nexport default (state = { isLoading: true, posts: [] }, action) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, isLoading: true };\n    case END_LOADING:\n      return { ...state, isLoading: false };\n    case FETCH_ALL:\n      return {  \n        ...state,\n        posts: action.payload.data, //here our post would be equal to action.payload.data\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages,\n      };\n    case CREATE: //for creating new posts\n      return {...state, posts:[ ...state.posts, action.payload]}; //the posts would be added to the action.payload\n      case START_LOADING:\n        return { ...state, isLoading: true };\n      case END_LOADING:\n        return { ...state, isLoading: false };\n    case FETCH_BY_SEARCH:\n      return {...state, posts: action.payload }\n    case FETCH_POST:\n      return {...state, post: action.payload }\n    case DELETE:\n      return {...state, posts:  state.posts.filter((post) => post._id !== action.payload )} // we're returning all the posts, but filtering out the one we deleted\n    case UPDATE:\n      return {...state, posts: state.posts.map((post) =>\n        post._id === action.payload._id ? action.payload : post\n      )};\n    case COMMENT:\n      return {\n        ...state, \n        posts: state.posts.map((post) => { //return all the other posts normally, and change the post that just received a comment\n          if(post._id === action.payload._id) return action.payload\n\n          return post;\n        })\n        };\n\n    default:\n      return state;\n  }\n};\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  media: {\n    borderRadius: '20px',\n    objectFit: 'cover',\n    width: '100%',\n    maxHeight: '600px',\n\n  },\n  card: {\n    display: 'flex',\n    width: '100%',\n    [theme.breakpoints.down('sm')]: {\n      flexWrap: 'wrap',\n      flexDirection: 'column',\n    },\n  },\n  section: {\n    borderRadius: '20px',\n    margin: '10px',\n    flex: 1,\n  },\n  imageSection: {\n    marginLeft: '20px',\n    [theme.breakpoints.down('sm')]: {\n      marginLeft: 0,\n    },\n  },\n  recommendedPosts: {\n    display: 'flex',\n    [theme.breakpoints.down('sm')]: {\n      flexDirection: 'column',\n    },\n  },\n  loadingPaper: {\n    display: 'flex', justifyContent: 'center', alignItems: 'center', padding: '20px', borderRadius: '15px', height: '39vh',\n  },\n  commentsOuterContainer: {\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n  commentsInnerContainer: {\n    height: '200px',\n    overflowY: 'auto',\n    marginRight: '30px',\n  },\n}));","// This is where all the routes are initiated from the backend to the front end\nimport axios from 'axios';\n\nconst API = axios.create({ baseURL: 'https://memoiproject.herokuapp.com/' })\n\n// const url = 'http://localhost:5000/posts';\n\nAPI.interceptors.request.use((req) => {  //this will send our token to the backend midddleware to verify that we are logged in\n    if (localStorage.getItem('profile')) {\n        req.headers.Authorization = `Bearer ${JSON.parse(localStorage.getItem('profile')).token}`; // this will get our token \n    }\n\n    return req;\n})\n\n\n// export const fetchPosts = () => API.get('/posts'); //NORMAL GET REQUEST WITHOUT PAGES \nexport const fetchPost = (id) => API.get(`/posts/${id}`); ////for fetching single post(post with more details)\nexport const fetchPosts = (page) => API.get(`/posts?page=${page}`); //from here, we move to the backend(controllers) to modfy the data for the specific page\n\n//^^^^^^\nexport const fetchPostsBySearch = (searchQuery) => API.get(`/posts/search?searchQuery=${searchQuery.search ||'none'}&tags=${searchQuery.tags}`); // Query parameters start with a ? and then you specify a variable name. if there is no search we want to show string of none. And in this searchquery, we'll also handle our tag search\n//^^^\nexport const createPost = (newPost) => API.post('/posts', newPost);\nexport const updatePost = (id, updatedPost) => API.patch(`/posts/${id}`, updatedPost);\nexport const deletePost = (id) => API.delete(`/posts/${id}`);\nexport const likePost = (id) => API.patch(`/posts/${id}/likePost`);\n\n//For COMMENT\nexport const comment = (value, id) => API.post(`/posts/${id}/commentPost`, {value});\n\nexport const signIn = (formData) => API.post('/user/signin', formData);\nexport const signUp = (formData) => API.post('/user/signup', formData);\n\n\n//once we have the api requests here, we move on to Actions","import { FETCH_ALL, FETCH_POST, FETCH_BY_SEARCH, CREATE, UPDATE, DELETE, START_LOADING, END_LOADING, COMMENT } from '../constants/actionTypes';\nimport * as api from '../api' //means we are importing everything from the api folder\n\n\n// Action Creators are functions that return actions and they have a type & payload\n\n//********************************* */\n\n// export const getPosts = () => async (dispatch) => {\n//     try {\n//         const { data } = await api.fetchPosts();\n\n//         dispatch({ type: FETCH_ALL, payload: data });\n//     } catch (error ) {\n//         console.log(error.message); \n//     }\n// };\n\n//********************************* */\n//for fetching single post(post with more details)\nexport const getPost = (id) => async (dispatch) => {\n    try {\n        dispatch({ type: START_LOADING })\n        const { data } = await api.fetchPost(id);\n\n        dispatch({ type: FETCH_POST, payload: data }); //our payload is now an object that contains different things(data of post, current page and number of pages)\n        dispatch({ type: END_LOADING });\n    } catch (error ) {\n        console.log(error.message); \n    }\n};\n\n\n//for getting posts with pages\nexport const getPosts = (page) => async (dispatch) => {\n    try {\n        dispatch({ type: START_LOADING })\n        const { data } = await api.fetchPosts(page);\n\n        dispatch({ type: FETCH_ALL, payload: data });\n        dispatch({ type: END_LOADING });\n    } catch (error ) {\n        console.log(error.message); \n    }\n};\n\n\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\n    try {\n        dispatch({ type: START_LOADING })\n        const { data: { data } } = await api.fetchPostsBySearch(searchQuery);\n\n        dispatch({ type: FETCH_BY_SEARCH, payload: data });\n        dispatch({ type: END_LOADING });\n    } catch (error) {\n        console.log(error)\n    }\n\n};\n\n\n\n\nexport const createPost = (post ) => async (dispatch) => {\n    try {\n        dispatch({ type: START_LOADING })\n        const { data } = await api.createPost(post); // this is simply making an api request to the back end server\n\n        dispatch({ type: CREATE, payload: data  });\n        dispatch({ type: END_LOADING });\n    } catch (error ) {\n        console.log(error); \n    }\n};\n\nexport const updatePost = (id, post) => async (dispatch) => {\n    try {\n        const { data } = await api.updatePost(id, post); \n\n        dispatch({ type: UPDATE, payload: data  });\n    } catch (error ) {\n        console.log(error ); \n    }\n};\n\nexport const deletePost = (id) => async (dispatch) => {\n    try {\n        await api.deletePost(id); \n\n        dispatch({ type: DELETE, payload: id  });\n    } catch (error ) {\n        console.log(error); \n    }\n};\n\nexport const likePost = (id) => async (dispatch) => {\n    try {\n        const { data } = await api.likePost(id); \n\n        dispatch({ type: UPDATE, payload: data  });\n    } catch (error ) {\n        console.log(error); \n    }\n};\n\n//COMMENT POST\nexport const commentPost = (value, id) => async (dispatch) => {\n    try {\n       const { data } = await api.comment(value, id);\n\n       dispatch({ type: COMMENT, payload: data  });\n       return data.comments;\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n//From here, we move to the reducers to implement our actions\n\n//const { data} .. we are simply taking the data from the response object ","import React, {useRef, useState} from \"react\";\nimport { Typography, TextField, Button } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\n\nimport useStyles from './styles';\nimport { commentPost } from '../../actions/posts'\n\nconst CommentSection = ({ post }) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const [ comments, setComments ] = useState(post?.comments);\n    const [ comment, setComment ] = useState(''); //this state will keep track of the value of a specific comment\n    const user  = JSON.parse(localStorage.getItem('profile')); //grabbing our user from loacl storage to get the details of the person adding a comment\n    const commentsRef = useRef(); \n\n    const handleClick = async() => {\n        const finalComment = `${user.result.name}: ${comment}`;\n\n        const newComments = await dispatch(commentPost(finalComment, post._id));\n\n        setComments(newComments);\n        setComment('');\n\n        commentsRef.current.scrollIntoView({ behavior: 'smooth'});\n    }\n\n    return ( \n        <div>\n            <div className={classes.commentsOuterContainer }>\n                <div className={classes.commentsInnerContainer}>\n                    <Typography gutterBottom variant=\"h6\">Comments</Typography>\n                    {comments.map((comment, index) => (\n                        <Typography key={index} gutterBottom variant=\"subtitle1\">\n                            <strong>{comment.split(': ')[0]}</strong>\n                            {comment.split(':')[1]}\n                        </Typography>\n                    ))}\n                    <div ref={commentsRef}/>\n                </div>\n                {/* If there's a user, display this code which will allow the user to add and view comments*/}\n                {user?.result?.name && (\n                    <div style={{ width: '70%'}}>\n                    <Typography gutterBottom variant=\"h6\" >Leave a comment</Typography>\n                    <TextField \n                    fullWidth\n                    rows={4}\n                    variant=\"outlined\"\n                    label=\"Comment\"\n                    multiline\n                    value={comment}\n                    onChange={(e) => setComment(e.target.value) }\n                    />\n                    <Button style={{ marginTop: '10px'}} fullWidth disabled={!comment} variant=\"contained\" color=\"primary\" onClick={handleClick}>Comment</Button>\n                    </div> \n                )}\n            </div>\n        </div>\n     );\n}\n \nexport default CommentSection;\n\n//we'll pass the comment section inside the post details component.","import React,{useEffect} from \"react\";\nimport { Paper, Typography, CircularProgress, Divider } from '@material-ui/core';\nimport {useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nimport CommentSection from \"./CommentSection\";\nimport { getPost, getPostsBySearch } from '../../actions/posts';\nimport useStyles from './styles';\n\nconst PostDetails = () => {\n   const { post, isLoading, posts} = useSelector((state) => state.posts); //Getting the data about the post from the reducer.\n   const dispatch = useDispatch();\n   const navigate = useNavigate();\n   const classes = useStyles();\n   const { id } = useParams(); //Getting the Id \n\n\n   //LOGIC FOR FETCHING ONLY A SINGLE POSTS\n   useEffect(() => {\n      dispatch(getPost(id))\n   }, [id]); //This useEffect would happen when the id changes\n\n\n   //LOGIC FOR FETCHING RECOMMENDED POSTS // we'll be using the same endpoint we used for the (get post by search)\n\n   useEffect(() => {\n    if(post){\n      dispatch(getPostsBySearch({ search: 'none', tags: post?.tags.join(',')})) //search is none beacuse we aren't looking for search, we are looking for tags. The tags will be used to recomment the post\n    }\n   }, [post])\n\n   //These checks are making sure we don't render the page if we don't have the post already\n   if(!post) return null;\n\n   if(isLoading) {\n     return (\n       <Paper elevation={6} className={classes.loadingPaper}>\n        <CircularProgress size=\"7em\" />\n       </Paper>\n     )\n   }\n\n   const recommendedPosts = posts.filter(({ _id}) => _id !== post._id ); // we will destructure the _id and then we want to keep all the posts but removes the ones where the _id is not equal to the current post._id because the current post cannot be in it's own recommended post\n\n   const openPost = (_id) => navigate(`/posts/${_id}`)\n\n   return ( \n      <Paper style={{ padding: '20px', borderRadius: '15px' }} elevation={6}>\n        <div className={classes.card}>\n          <div className={classes.section}>\n            <Typography variant=\"h3\" component=\"h2\">{post.title}</Typography>\n            <Typography gutterBottom variant=\"h6\" color=\"textSecondary\" component=\"h2\">{post.tags.map((tag) => `#${tag} `)}</Typography>\n            <Typography gutterBottom variant=\"body1\" component=\"p\">{post.message}</Typography>\n            <Typography variant=\"h6\">Created by: {post.name}</Typography>\n            <Typography variant=\"body1\">{moment(post.createdAt).fromNow()}</Typography>\n            <Divider style={{ margin: '20px 0' }} />\n            <Typography variant=\"body1\"><strong>Realtime Chat - coming soon!</strong></Typography>\n            <Divider style={{ margin: '20px 0' }} />\n\n            {/* The comment section component would be passed here */}\n            <CommentSection post={post}/> \n\n            <Divider style={{ margin: '20px 0' }} />\n          </div>\n          <div className={classes.imageSection}>\n            <img className={classes.media} src={post.selectedFile || 'https://user-images.githubusercontent.com/194400/49531010-48dad180-f8b1-11e8-8d89-1e61320e1d82.png'} alt={post.title} />\n          </div>\n        </div>\n        {/* Reccomended post */}\n        { recommendedPosts.length && (\n          <div className={classes.section}>\n            <Typography gutterBottom variant=\"h5\">You might also like:</Typography>\n            <Divider/>\n            <div className={classes.recommendedPosts}>\n              {/* We map over the recommendedPosts and destructure all the things we need */}\n              {recommendedPosts.map(({ title, message, selectedFile, _id, likes, name}) => (\n                <div style={{ margin: '20px', cursor: 'pointer' }} onClick={() => openPost(_id)} key={_id}>\n                  <Typography gutterBottom variant=\"h6\">{title}</Typography>\n                  <Typography gutterBottom variant=\"subtitle2\">{name}</Typography>\n                  <Typography gutterBottom variant=\"subtitle2\">{message}</Typography>\n                  <Typography gutterBottom variant=\"h6\">{title}</Typography>\n                  <Typography gutterBottom variant=\"subtitle1\">Likes: {likes.length}</Typography>\n                  <img src={selectedFile} width=\"200px\"/>\n                </div>\n              ))} \n            </div>\n          </div>\n        )}\n      </Paper>\n   );\n}\n \nexport default PostDetails;","import { makeStyles } from '@material-ui/core/styles';\nimport { deepPurple } from '@material-ui/core/colors';\n\nexport default makeStyles((theme) => ({\n  appBar: {\n    borderRadius: 15,\n    margin: '30px 0',\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: '10px 50px',\n  },\n  heading: {\n    color: 'rgba(0,183,255, 1)',\n    textDecoration: 'none',\n  },\n  image: {\n    marginLeft: '15px',\n  },\n  toolbar: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    width: '400px',\n  },\n  profile: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    width: '400px',\n  },\n  userName: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  brandContainer: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  purple: {\n    color: theme.palette.getContrastText(deepPurple[500]),\n    backgroundColor: deepPurple[500],\n  },\n}));","export default __webpack_public_path__ + \"static/media/memories.9cfa8a46.png\";","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\"\nimport { AppBar, Avatar, Button, Toolbar, Typography } from \"@material-ui/core\";\nimport { useDispatch } from 'react-redux'\nimport { useLocation, useNavigate } from \"react-router\";\n\nimport decode from 'jwt-decode'; //***************** */\n\n\n\nimport useStyles from \"./styles\";\nimport memories from \"../../images/memories.png\";\n\nconst Navbar = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const [ user, setUser ] = useState(JSON.parse(localStorage.getItem('profile'))); //Here, we are retrieving the user data ('profile') set in the local storage\n\n  console.log(user);\n\n  const logout = () => {\n    dispatch({ type: 'LOGOUT' });\n\n    navigate('/');\n\n    setUser(null);\n  }\n\n  useEffect(() => {\n    const token = user?.token // we're checking if token exist and if it does, we are sending it to the token variable \n\n    //checking to see if the token has expired so we can log the user out\n    if(token) {\n      const decodedToken = decode(token);\n\n      if(decodedToken.exp * 1000 < new Date().getTime()) logout();\n    }\n\n    setUser(JSON.parse(localStorage.getItem('profile')));\n\n  }, [location]);  //The useLocation is like a usestate that returns a new location. Whenever the URL changes, a new location object will be returned. so in this block of code, we want the the user to be set when location changes.\n\n\n  return (\n    <AppBar className={classes.appBar} position=\"static\" color=\"inherit\">\n      <div className={classes.brandContainer}>\n        <Typography \n        component={Link} to=\"/\" //This is a link pointing to the homepage\n        className={classes.heading} \n        variant=\"h2\" \n        align=\"center\">\n          Memories\n        </Typography>\n        <img\n          className={classes.image}\n          src={memories}\n          alt=\"memories\"\n          height=\"60\"\n        />\n      </div>\n      <Toolbar className={classes.toolbar}>\n        {user ? (\n            <div className={classes.profile}>\n                <Avatar className={classes.purple} alt={user.result.name} src={user.result.imageUrl}>{user.result.name.charAt(0)}</Avatar> {/* this is used to show the first character of the users name incase the user doesn't have an image*/}\n\n                <Typography className={classes.userName} variant=\"h6\">{user.result.name}</Typography>\n                <Button variant=\"contained\" className={classes.logout} color=\"secondary\" onClick={logout}>Log Out</Button>\n            </div>\n        ) : (         //Writing a conditional to show something if the user is logged in and show something else if the user is not logged in\n          // so if the user is logged in, we want to show the users info e.g the users avatar\n          <Button variant=\"contained\" component={Link} to=\"/auth\" color=\"primary\">Sign In</Button>\n\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport default makeStyles(() => ({\n    ul: {\n        justifyContent: 'space-around'\n    },\n}))","import React, {useEffect} from \"react\";\nimport { Pagination, PaginationItem } from '@material-ui/lab';\nimport useStyles from './styles'; \nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from 'react-redux'; // allows us to dispatch redux actions\n\nimport { getPosts } from '../actions/posts'\n\nconst Paginate = ({page}) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const { numberOfPages } = useSelector((state) => state.posts); //getting the number of pages with use Selector\n    \n    useEffect(() => {\n        if(page) dispatch(getPosts(page));\n    }, [page]); //in this hook, we want to fetch the post anytime the page changes,\n    \n    return ( \n        <Pagination\n            classes={{ ul: classes.ul}}\n            count={numberOfPages} //this fetches the number of count depending on the number of pages we have.\n            page={Number(page) || 1 } \n            variant=\"outlined\"\n            color=\"primary\"\n            renderItem ={(item) => (\n                <PaginationItem {...item} component={Link} to={`/posts?page=${item.page}`}/>\n            )}\n        />\n     );\n}\n \nexport default Paginate;\n\n// Our current static pagination is now done, we'll import it inside the home component","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport default makeStyles((theme) => ({\n  appBar: {\n    borderRadius: 15,\n    margin: \"30px 0\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  heading: {\n    color: \"rgba(0,183,255, 1)\",\n  },\n  image: {\n    marginLeft: \"15px\",\n  },\n  [theme.breakpoints.down('sm')]: {\n    mainContainer: {\n      flexDirection: \"column-reverse\"\n    }\n  },\n \n}));\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles({\n  media: {\n    height: 0,\n    paddingTop: '56.25%',\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    backgroundBlendMode: 'darken',\n  },\n  border: {\n    border: 'solid',\n  },\n  fullHeightCard: {\n    height: '100%',\n  },\n  card: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    borderRadius: '15px',\n    height: '100%',\n    position: 'relative',\n  },\n  overlay: {\n    position: 'absolute',\n    top: '20px',\n    left: '20px',\n    color: 'white',\n  },\n  overlay2: {\n    position: 'absolute',\n    top: '20px',\n    right: '20px',\n    color: 'white',\n  },\n  grid: {\n    display: 'flex',\n  },\n  details: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    margin: '20px',\n  },\n  title: {\n    padding: '0 16px',\n  },\n  cardActions: {\n    padding: '0 16px 8px 16px',\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n  cardAction: {\n    display: 'block',\n    textAlign: 'initial',\n  },\n});","// ****\nimport React, { useState } from \"react\";\nimport { Card, CardActions, CardContent, CardMedia, Button, Typography, ButtonBase } from '@material-ui/core/';\nimport ThumbUpAltIcon from \"@material-ui/icons/ThumbUpAlt\";\nimport ThumbUpAltOutlined from '@material-ui/icons/ThumbUpAltOutlined';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport { useNavigate } from 'react-router-dom';\nimport moment from \"moment\";\nimport useStyles from \"./styles\";\nimport { useDispatch } from 'react-redux'\n\nimport { deletePost, likePost } from \"../../../actions/posts\";\n\nconst Post = ({ post, setCurrentId }) => {\n  const classes = useStyles();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [ likes, setLikes ] = useState(post?.likes);\n  \n  const user = JSON.parse(localStorage.getItem('profile'));\n\n  const hasLikedPost = post.likes.find((like) => like === (user?.result?.googleId || user?.result?._id));\n\n  const handleLike = async() => {\n    dispatch(likePost(post._id));\n\n    if(hasLikedPost) {\n      setLikes(post.likes.filter((id) => id !== (user?.result?.googleId || user?.result?._id)))\n    }else{\n      setLikes([ ...post.likes, (user?.result?.googleId || user?.result?._id )]) \n    }\n  }\n\n\n  //creating a subcomponent that will handle our like and likes \n  //* we'll pass the like subcomponent into the like button code block \n  const Likes = () => {\n    if (likes.length > 0) {\n      return likes.find((like) => like === (user?.result?.googleId || user?.result?._id)) //Here we are checking if a current user liked a post or not\n        ? ( //Here we are checking if the likes array contains the id of the current user (either the google-id or the custom-id from the data base)\n          <><ThumbUpAltIcon fontSize=\"small\" />&nbsp;{likes.length > 2 ? `You and ${likes.length - 1} others` : `${likes.length} like${likes.length > 1 ? 's' : ''}` }</> //we'll have a message saying 'You and a certain number of people liked something or the has 1 or multiple likes\n        ) : (\n          <><ThumbUpAltOutlined fontSize=\"small\" />&nbsp;{likes.length} {likes.length === 1 ? 'Like' : 'Likes'}</> //And if the person didn't like it, we'll just say number of like or likes\n        );\n    }\n\n    return <><ThumbUpAltOutlined fontSize=\"small\" />&nbsp;Like</>; //And if the user is the first to like it, it will just show like\n  };\n\n  const openPost = () => {\n    navigate(`/posts/${post._id}`); //opening the post details of the post that is currently selected with the id, by navigating to that id\n  };\n\n  \n\n\n  return (\n    <Card className={classes.card} raised elevation={6}>\n      <ButtonBase className={classes.cardAction} onClick={openPost}> {/* This Buttonbase would allow us view more details about any card we click */}\n      <CardMedia\n        className={classes.media}\n        image={post.selectedFile}\n        title={post.title}\n      />\n      <div className={classes.overlay}>\n        <Typography variant=\"h6\">{post.name}</Typography> {/******* */}\n        <Typography variant=\"body2\">\n          {moment(post.createdAt).fromNow()}\n        </Typography>\n      </div>\n\n      {/*We are checking if the post was created by the current user, only then do we want to show the edit button */}\n      {(user?.result?.googleId === post?.creator || user?.result?._id === post?.creator) && (\n        <div className={classes.overlay2}> \n          <Button\n            style={{ color: \"white\" }}\n            size=\"small\"\n            onClick={() => setCurrentId(post._id)}\n          >\n            {\" \"}\n            {/* For editing the post */}\n            <MoreHorizIcon fontSize=\"medium\" />\n          </Button>\n        </div>\n      )}\n      \n      <div className={classes.details}>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {post.tags.map((tag) => `#${tag} `)}\n        </Typography>{\" \"}\n        {/* adding hashtags to our tags */}\n      </div>\n      <Typography className={classes.title} variant=\"h5\" gutterBottom>\n        {post.title }\n      </Typography>\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {post.message}\n        </Typography>\n      </CardContent>\n      </ButtonBase>\n      <CardActions className={classes.cardActions}>\n\n        {/* we'll pass the like subcomponent into the like button */}\n        <Button size=\"small\" color=\"primary\" disabled={!user?.result} onClick={handleLike}>\n          <Likes/> {/* we'll pass the like subcomponent into the button */}\n        </Button>\n\n        {/*We are checking if the post was created by the current user, only then do we want to show the delete button */}\n        {(user?.result?.googleId === post?.creator || user?.result?._id === post?.creator) && (\n          <Button size=\"small\" color=\"primary\" onClick={() => dispatch(deletePost(post._id))}>\n            <DeleteIcon fontSize=\"small\" />\n            Delete\n          </Button>\n        )}\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default Post;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  mainContainer: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  smMargin: {\n    margin: theme.spacing(1),\n  },\n  actionDiv: {\n    textAlign: 'center',\n  },\n}));","import React from \"react\";\nimport { Grid, CircularProgress } from \"@material-ui/core\"; // ***\nimport Post from \"./Post/Post\";\nimport { useSelector } from \"react-redux\";\n\nimport useStyles from \"./styles\";\n\nconst Posts = ({setCurrentId}) => {\n  //const posts = useSelector((state) => state.posts) \n  const {posts, isLoading} = useSelector((state) => state.posts) // ^^^^^^^^ We are destructing the post because we have an object with aproperty of post  ^^^^^^^^^^^\n  const classes = useStyles();\n\n  console.log(posts)\n\n  if(!posts.length && !isLoading) return 'No Posts'\n  \n  return (\n    isLoading ? <CircularProgress/> : (  //if there's no post.length, show circular progress (loading) else show content\n      <Grid className={classes.container} container alignItems=\"stretch\" spacing={3}>\n        {posts.map((post) => (\n          <Grid key={post._id} item xs={12} sm={12} md={6} lg={3}>\n              <Post post={post} setCurrentId={setCurrentId} /> {/* we'll pass the (setCurrentId) one level deeper into the post component. this is called props drilling */}\n          </Grid>\n        ))\n          \n        }\n      </Grid>\n    )\n  );\n};\n\nexport default Posts;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n    },\n  },\n  paper: {\n    padding: theme.spacing(2),\n  },\n  form: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n  },\n  fileInput: {\n    width: '97%',\n    margin: '10px 0',\n  },\n  buttonSubmit: {\n    marginBottom: 10,\n  },\n}));","import React, { useState, useEffect } from \"react\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from \"react-file-base64\";\nimport { useDispatch, useSelector } from \"react-redux\"; //** */\nimport useStyles from \"./styles\";\nimport { createPost, updatePost } from \"../../actions/posts\";\n\nconst Form = ({ currentId, setCurrentId }) => {\n  const [postData, setPostData] = useState({ title: '', message: '', tags: '', selectedFile: '' });\n\n  // updating the field of the form with the values of the post we want to update ****\n  // const post = useSelector((state) => currentId ? state.posts.find((p) => p._id === currentId) : null); WITHOUT ADDING PAGES\n  const post = useSelector((state) => currentId ? state.posts.posts.find((p) => p._id === currentId) : null); \n  // if we have a current id, we want to loop over state.posts and we want to call a find method on them we want to find the post(p) that has the same id as the current id. if we don't have the current id, return null\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n\n  // use the useEffect hook to populate the values of the form\n  useEffect(() => {\n    if (post) setPostData(post); //if post exist, we'll setpostdata and populate it with the data of the post\n\n    console.log(post);\n  }, [post]);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if(currentId) {\n      dispatch(updatePost(currentId, {...postData, name: user?.result?.name}));\n      \n    } else {\n      dispatch(createPost({ ...postData, name : user?.result?.name})); // the name: will set set name of whoever created the post using the persons Id\n    }\n  };\n\n  const clear = () => {\n    setCurrentId(0);\n    setPostData({\n      title: \"\",\n      message: \"\",\n      tags: \"\",\n      selectedFile: \"\",\n    });\n  };\n\n  //creating a card to show something if there's no user logged in\n  if(!user){\n    <Paper className={classes.paper}>\n      <Typography variant=\"h6\" align=\"center\">\n        Please sign in\n      </Typography>\n    </Paper>\n  }\n\n\n  return (\n    <Paper className={classes.paper} elevation={6}>\n      <form\n        autoComplete=\"off\"\n        noValidate\n        className={`${classes.root} ${classes.form} `}\n        onSubmit={handleSubmit}\n      >\n        <Typography variant=\"h6\">Creating a Memory</Typography>\n        {/* <TextField\n          name=\"creator\"\n          variant=\"outlined\"\n          label=\"Creator\"\n          fullWidth\n          value={postData.creator}\n          onChange={(e) =>\n            setPostData({ ...postData, creator: e.target.value })\n          } // this will enable us change the value of this specific field\n        /> */}\n        <TextField\n          name=\"title\"\n          variant=\"outlined\"\n          label=\"Title\"\n          fullWidth\n          value={postData.title}\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })} // this will enable us change the value of this specific field\n        />\n        <TextField\n          name=\"message\"\n          variant=\"outlined\"\n          label=\"Message\"\n          fullWidth\n          value={postData.message}\n          onChange={(e) =>\n            setPostData({ ...postData, message: e.target.value })\n          } // this will enable us change the value of this specific field\n        />\n        <TextField\n          name=\"tags\"\n          variant=\"outlined\"\n          label=\"Tags\"\n          fullWidth\n          value={postData.tags}\n          onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} // this will enable us change the value of this specific field\n        />\n        <div className={classes.fileInput}>\n          <FileBase\n            type=\"file\"\n            multiple={false}\n            onDone={({ base64 }) =>\n              setPostData({ ...postData, selectedFile: base64 })\n            }\n          />\n        </div>\n        <Button\n          className={classes.buttonSubmit}\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"large\"\n          type=\"submit\"\n          fullWidth\n        >\n          Submit\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n          onClick={clear}\n          fullWidth\n        >\n          Clear\n        </Button>\n      </form>\n    </Paper>\n  );\n};\n\nexport default Form;\n","import React, { useState } from \"react\";\nimport { Container, Grow, Grid, Paper, AppBar, TextField, Button } from \"@material-ui/core\";\nimport { useDispatch } from 'react-redux'; // allows us to dispatch redux actions\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport ChipInput from 'material-ui-chip-input'\n\nimport { getPostsBySearch } from '../../actions/posts'; //^^^^^\nimport Pagination from '../Pagination' //^^\nimport useStyles from '../../styles';\nimport Posts from \"../Posts/Posts\";\nimport Form from \"../Form/Form\";\n\nfunction useQuery() { //setting up our url search param.this will help identify the page we currently and the search terms we are looking for\n  return new URLSearchParams(useLocation().search);\n}\n\nconst Home = () => {\n  const [currentId, setCurrentId] = useState(null); //**  it's null at the start because we don't have the id selected */\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  const query = useQuery(); // this will let us use it as a hook.\n  const navigate  = useNavigate();\n  const page = query.get('page') || 1; // getting our page info. This will read the url and see if we have a page parameter in there if so, it will populate this variable and if we don't have the page we'll be on the first one .//THE PAGE WOULD BE PASSED AS A PROP INTO THE PAGINATION COMPONENT\n\n  const searchQuery = query.get('searchQuery')\n  const [ search, setSearch ] = useState(''); // setting a state for our search fields\n  const [ tags, setTags ] = useState([]); // state for tag search\n  //^^^^^^^^^^\n\n\n  //********************************* */\n\n  // useEffect(() => {\n  //   dispatch(getPosts());\n  // }, [currentId, dispatch]); //adding currentId as a dependency would mean we don't have to refresh everytime we make changes\n\n  //********************************* */\n\n\n  //^^^^^^^^^^^^^^^^^\n  const searchPost = () => {\n\n    if(search.trim() || tags) {\n      //dispatch -> fetch search post\n      dispatch(getPostsBySearch({ search, tags: tags.join(',')})); //This action is taking the search query object that we specified, and we also provide tags which we have to render into a string that way it will be easier to pass data from the front to backend. because we cannot pass an array through the url parameters\n      navigate(`/posts/search?searchQuery=${search || 'none'}&tags=${tags.join(',')}`)\n    }else{\n      navigate('/');\n    }\n  }\n\n  const handleKeyPress = (e) => {\n    if(e.keyCode === 13 ) {\n      searchPost();\n      //This would enable us use the enter key submit a search\n    }\n  }\n\n  const handleAdd = (tag) => {\n    setTags([ ...tags, tag]); \n  }\n\n  const handleDelete = (tagToDelete) => {\n    setTags(tags.filter((tag) => tag !== tagToDelete));\n  };\n\n  //^^^^^^^\n  return (\n    <Grow in>\n      <Container maxWidth=\"xl\">\n        <Grid container className={classes.gridContainer} justifyContent=\"space-between\" alignItems=\"stretch\" spacing={3} >\n          <Grid item xs={12} sm={6} md={9}>\n            <Posts setCurrentId={setCurrentId} />{\" \"}\n            {/* passing the setter method (Methods which update a variable) which is the (setCurrentId) as props into the Posts component */}\n          </Grid>\n          <Grid item xs={12} sm={6} md={3}>\n            <AppBar className={classes.appBarSearch} position=\"static\" color=\"inherit\">\n              <TextField\n                name=\"search\"\n                variant=\"outlined\"\n                label=\"Search Memories\"\n                fullWidth\n                onKeyPress={handleKeyPress}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)} // This will enable us change the value of the search\n              />\n              <ChipInput\n                style={{ margin: '10px 0'}}\n                value={tags} //This value has to be dynamic, it has to be from state\n                onAdd={handleAdd}\n                onDelete={handleDelete}\n                label=\"Search Tags\"\n                variant=\"outlined\"\n              /> {/*^^ For searching by tags */}\n              <Button onClick={searchPost} className={classes.searchButton} variant='contained' color=\"primary\">Search</Button>\n            </AppBar>\n            <Form currentId={currentId} setCurrentId={setCurrentId} />{\" \"}\n            {/* passing the current Id as a prop into the form component. a setter method will be passed here as well  */}\n\n            {/* ^^^^ we are calling our pagination component below the form and if there's no search or tags, we don't want to show the pagination */}\n            {( !searchQuery && !tags.length) && (\n            <Paper className={classes.pagination} elevation={6}>\n              <Pagination page={page}/> \n            </Paper>\n            )}\n          </Grid>\n        </Grid>\n      </Container>\n    </Grow>\n  );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst icon = () => (\n  <svg style={{ width: '20px', height: '20px' }} viewBox=\"0 0 24 24\">\n    <path\n      fill=\"currentColor\"\n      d=\"M21.35,11.1H12.18V13.83H18.69C18.36,17.64 15.19,19.27 12.19,19.27C8.36,19.27 5,16.25 5,12C5,7.9 8.2,4.73 12.2,4.73C15.29,4.73 17.1,6.7 17.1,6.7L19,4.72C19,4.72 16.56,2 12.1,2C6.42,2 2.03,6.8 2.03,12C2.03,17.05 6.16,22 12.25,22C17.6,22 21.5,18.33 21.5,12.91C21.5,11.76 21.35,11.1 21.35,11.1V11.1Z\"\n    />\n  </svg>\n);\n\nexport default icon;","import { makeStyles } from '@material-ui/core/styles';\n\nexport default makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: theme.spacing(2),\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n    },\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  googleButton: {\n    marginBottom: theme.spacing(2),\n  },\n}));","import React from \"react\";\nimport { TextField, Grid, InputAdornment, IconButton } from \"@material-ui/core\";\n\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\n\nconst Input = ({ label, name, handleChange, handleShowPassword, autoFocus, type, half }) => { // This props would enable us have dynamic values\n    return ( \n        <Grid item xs={12} sm={half ? 6 : 12 }> {/* e.g if we want some inputs to take half the width, we'll have a special prop ( half ) so if half is true we want it to take half the width which is 6 else it should remain the initial width set which is 12 */}\n\n        <TextField\n            name={name}\n            onChange={handleChange}\n            variant=\"outlined\"\n            required\n            fullWidth\n            label={label}\n            autoFocus={autoFocus}\n            type={type}\n            InputProps={ name === 'password' ? {  \n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        <IconButton onClick={handleShowPassword}>\n                            { type === 'password' ? <Visibility/> : <VisibilityOff/> }\n                            </IconButton>\n                    </InputAdornment>\n                ),\n            } : null } //For show password icon\n        />\n\n        </Grid>\n     );\n}\n \nexport default Input;\n\n//we are creating a Grid that all of our items would have, this would save the trouble of writing it multiple times\n\n// when we have some components that look a behave the same, we create a new custom component that will generalize the logic by. This will be a component that will hold similar details and we'll just specify the things that change.\n\n\n// In javascript, when there's a ternary operator with the second value being null, use && and you won't have to provide the null.","import React, { useState } from \"react\";\nimport { Avatar, Typography, Button, Paper, Grid, Container } from \"@material-ui/core\";\nimport { useNavigate } from \"react-router\";\n\nimport { GoogleLogin } from \"react-google-login\"; //This import is for the google o-authentication (openAuthorization)\nimport { useDispatch } from 'react-redux'\n\nimport Icon from './icon';\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport useStyles from \"./styles\";\nimport Input from \"./Input\";\nimport { signin, signup } from '../../actions/auth';\n\n\nconst initialState = { //this is the initial state value for our formData, this will hold the users details\n  firstName: '',\n  lastName: '',\n  email: '',\n  password: '',\n  confirmPassword: ''\n}\n\nconst Auth = () => {\n  const classes = useStyles();\n  const [isSignup, setIsSignup] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData ] = useState(initialState); //This state is for the user form input\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n\n  \n  const handleShowPassword = () => {\n    setShowPassword((prevShowPassword) => !prevShowPassword); // it's a function that will toggle the state/ visibility of the password so that when clicked\n  };\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    console.log(formData);\n\n    //on submit, we want to have have logic to either sign up or sign in the user\n\n    if (isSignup) {\n      dispatch(signup(formData, navigate )); //we are passing the formDate so we can have it in our data base, and using navigate to navigate when something happens\n    } else {\n      dispatch(signin(formData, navigate ));\n    }\n  };\n\n  // to populate the initial state field, we'll use the handleChange function because each one of our inputs have that function\n\n\n  const handleChange = (e) => {\n    e.preventDefault();\n\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n\n\n  const switchMode = () => {\n    setIsSignup((prevIsSignup) => !prevIsSignup);\n    setShowPassword(false); \n  };\n\n\n\n  const googleSuccess = async (res) => { \n    const result = res?.profileObj; \n    \n    const token = res?.tokenId;    \n\n    try {\n        dispatch({ type: 'AUTH', data: { result, token }});\n\n        navigate('/'); //Once we dispatch the data/ user log's in, we want it to automatically redirect to the homepage.\n    } catch (error) {\n        console.log(error);\n    }\n  };\n\n\n\n  const googleFailure = (error) => {\n      console.log(error)\n    console.log('Google Sign In was unsuccessful, Try again')\n  };\n\n\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <Paper className={classes.paper} elevation={3}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography variant=\"h5\">{isSignup ? \"Sign Up\" : \"Sign In\"}</Typography>\n        <form className={classes.form} onSubmit={handleSubmit}>\n          <Grid container spacing={2}>\n            {isSignup && (\n              <>\n                <Input\n                  name=\"firstName\"\n                  label=\"First Name\"\n                  autoFocus\n                  half\n                  handleChange={handleChange}\n                />\n                <Input\n                  name=\"lastName\"\n                  label=\"Last Name\"\n                  half\n                  handleChange={handleChange}\n                />\n              </>\n            )}\n            <Input\n              name=\"email\"\n              label=\"Email Address\"\n              type=\"email\"\n              handleChange={handleChange}\n            />\n            <Input\n              name=\"password\"\n              label=\"Password\"\n              type={showPassword ? \"text\" : \"password\"}\n              handleChange={handleChange}\n              handleShowPassword={handleShowPassword}\n            />\n\n            {/** password confirmation field that would only show if we are on the signup form */}\n            {isSignup && (\n              <Input\n                name=\"confirmPassword\"\n                label=\"Repeat Password\"\n                handleChange={handleChange}\n                type=\"password\"\n              />\n            )}\n          </Grid>\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            {isSignup ? \"Sign Up\" : \"Sign In \"}\n          </Button>\n\n          {/* GOOGLE-LOGIN-AUTHENTICATION */}\n\n          <GoogleLogin\n            clientId=\"993419251326-st6e1dfmh7siqkuc0r6rfrc6ql31of2r.apps.googleusercontent.com\"\n            render={( renderProps  ) => ( //render means how our button should look like\n              <Button\n                className={classes.googleButton}\n                color=\"primary\"\n                fullWidth\n                onClick={renderProps.onClick}\n                disabled={renderProps.disabled}\n                startIcon={<Icon />}\n                variant=\"contained\"\n              > \n              Google Sign In \n              </Button>\n            )}\n            onSuccess={googleSuccess}\n            onFailure={googleFailure}\n            cookiePolicy=\"single_host_origin\"\n          />\n\n          {/* *** */}\n\n\n          {/* creating a button that will allow us switch from SignUp to Sign in */}\n          <Grid container justifyContent=\"flex-end\">\n            <Grid item>\n              <Button onClick={switchMode}>\n                {isSignup\n                  ? \"Already have an account? Sign In\"\n                  : \"Don't have an account? Sign Up \"}\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </Paper>\n    </Container>\n  );\n};\n\nexport default Auth;\n\n// here we created one variable (isSignUp) and based on the change of this variable we'll be able to render divs based on condition of the variable\n","import { AUTH } from '../constants/actionTypes';\nimport * as api from '../api';\n\n// //if action creators are asyn, we use redux-thunk meaning we have a function that returns an async function with a disptach\n\nexport const signin = (formData, navigate) => async (dispatch) => {\n    try {\n        //login user\n        const { data } = await api.signIn(formData);\n\n        dispatch({ type: AUTH, data });\n\n        navigate('/');\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const signup = (formData, navigate) => async (dispatch) => {\n    try {\n        // user signup\n        const { data } = await api.signUp(formData);\n\n        dispatch({ type: AUTH, data });\n\n        navigate('/');\n    } catch (error) {\n        console.log(error); \n    }\n}","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Routes, Route, Navigate } from \"react-router-dom\";\nimport { Container } from \"@material-ui/core\";\nimport PostDetails from \"./components/PostDetails/PostDetails\";\nimport Navbar from \"./components/Navbar/Navbar\"; //*/*/*/ /\nimport Home from \"./components/Home/Home\";\nimport Auth from \"./components/Auth/Auth\";\n\nfunction App() {\n  const user = JSON.parse(localStorage.getItem('profile'));\n\n  return (\n    <BrowserRouter>\n      <Container maxWidth=\"xl\">\n        <Navbar />\n        <Routes>\n          <Route path=\"/\" element={<Navigate to='/posts'/>} /> {/* We only want to see posts if we are on this specific path */}\n          <Route path=\"/posts\" element={<Home/>}/>\n          <Route path=\"/posts/search\" element={<Home/>}/> {/* we also want to render the home component if we're on the /posts/search */}\n          <Route path=\"/posts/:id\" element={<PostDetails/>}/> {/* This is the post details path and the id will be dynamic( the id would be whatever card/post was clicked on)*/}\n          <Route path=\"/auth\" element={ !user ? <Auth/> : <Navigate to='/posts'/>} />\n        </Routes>\n      </Container>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// for initializing redux\nimport { Provider } from 'react-redux' // provider makes the store accessible from anywhere on the app\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport reducers from \"./reducers\";\n\nimport App from \"./App\";\n\nconst store = createStore(reducers, compose(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}